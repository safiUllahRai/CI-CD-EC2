import { Structure, WriterFunction } from 'ts-morph';
type FlatType<T> = T extends Array<infer R> ? R : T;
type NeverIfIsNeverArray<T> = T extends Array<never> ? never : T;
type ExtractPrimitive<T> = Extract<FlatType<Exclude<T, WriterFunction>>, string | number | boolean>;
/**
 * Делаем из объекта пригодный объект для поиска
 *
 * @example
 * // Тип
 * {
 *   named: string;
 *   flag: boolean;
 *   keys: string[]
 *   objects: {}[]
 * }
 *
 * // Query
 *
 * {
 *   named: string | string[];
 *   flag: boolean | boolean[];
 *   keys: string | string[];
 *   objects: never;
 * }
 *
 */
export type Query<T extends Structure> = Partial<{
    [key in keyof T]: ExtractPrimitive<T[key]> | NeverIfIsNeverArray<ExtractPrimitive<T[key]>[]>;
}>;
export declare function matchQuery<T extends Structure>(value: T, query?: Query<T>): boolean;
export {};
