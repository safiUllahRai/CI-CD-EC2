import { ChangeDetectorRef, EmbeddedViewRef, NgZone, TemplateRef, ViewContainerRef } from '@angular/core';
import { RxStrategyCredentials } from '@rx-angular/cdk/render-strategies';
import { MonoTypeOperatorFunction, Observable } from 'rxjs';
/**
 * @internal
 * creates an embeddedViewRef
 *
 * @param viewContainerRef
 * @param templateRef
 * @param context
 * @param index
 * @return EmbeddedViewRef<C>
 */
export declare function createEmbeddedView<C>(viewContainerRef: ViewContainerRef, templateRef: TemplateRef<C>, context: C, index?: number): EmbeddedViewRef<C>;
/**
 * @internal
 *
 * A factory function returning an object to handle `TemplateRef`'s.
 * You can add and get a `TemplateRef`.
 *
 */
export declare function templateHandling<N, C>(viewContainerRef: ViewContainerRef): {
    add(name: N, templateRef: TemplateRef<C>): void;
    get(name: N): TemplateRef<C>;
    get$(name: N): Observable<TemplateRef<C>>;
    createEmbeddedView(name: N, context?: C, index?: number): EmbeddedViewRef<C>;
};
/**
 * @internal
 *
 * A side effect operator similar to `tap` but with a static internal logic.
 * It calls detect changes on the 'VirtualParent' and the injectingViewCdRef.
 *
 * @param injectingViewCdRef
 * @param strategy
 * @param notifyNeeded
 * @param ngZone
 */
export declare function notifyAllParentsIfNeeded<T>(injectingViewCdRef: ChangeDetectorRef, strategy: RxStrategyCredentials, notifyNeeded: () => boolean, ngZone?: NgZone): MonoTypeOperatorFunction<T>;
