import { NgIterable } from '@angular/core';
import { Observable, ReplaySubject } from 'rxjs';
export interface RxListViewComputedContext {
    index: number;
    count: number;
}
export interface RxListViewContext<T, U = RxListViewComputedContext> extends RxListViewComputedContext {
    $implicit: T;
    item$: Observable<T>;
    updateContext(newProps: Partial<U>): void;
}
export declare class RxDefaultListViewContext<T, U extends NgIterable<T> = NgIterable<T>, K = keyof T> implements RxListViewContext<T> {
    readonly _item: ReplaySubject<T>;
    item$: Observable<T>;
    private _$implicit;
    private _$complete;
    private _$error;
    private _$suspense;
    private readonly _context$;
    set $implicit($implicit: T);
    get $implicit(): T;
    get $complete(): boolean;
    get $error(): false | Error;
    get $suspense(): any;
    get index(): number;
    get count(): number;
    get first(): boolean;
    get last(): boolean;
    get even(): boolean;
    get odd(): boolean;
    get index$(): Observable<number>;
    get count$(): Observable<number>;
    get first$(): Observable<boolean>;
    get last$(): Observable<boolean>;
    get even$(): Observable<boolean>;
    get odd$(): Observable<boolean>;
    constructor(item: T, customProps?: {
        count: number;
        index: number;
    });
    updateContext(newProps: Partial<RxListViewComputedContext>): void;
    select: (props: K[]) => Observable<any>;
}
