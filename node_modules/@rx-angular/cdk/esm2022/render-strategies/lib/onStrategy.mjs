import { Observable, throwError } from 'rxjs';
import { catchError, map, take } from 'rxjs/operators';
/**
 * @internal
 *
 * @param value
 * @param strategy
 * @param workFactory
 * @param options
 */
export function onStrategy(value, strategy, workFactory, options = {}) {
    return new Observable((subscriber) => {
        subscriber.next(value);
    }).pipe(strategy.behavior({
        work: () => workFactory(value, strategy.work, options),
        scope: options.scope || {},
        ngZone: options.ngZone,
    }), catchError((error) => throwError(() => [error, value])), map(() => value), take(1));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25TdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2RrL3JlbmRlci1zdHJhdGVnaWVzL3NyYy9saWIvb25TdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUd2RDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsS0FBUSxFQUNSLFFBQStCLEVBQy9CLFdBSVMsRUFDVCxVQUFxRCxFQUFFO0lBRXZELE9BQU8sSUFBSSxVQUFVLENBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtRQUN0QyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDTCxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1FBQ3RELEtBQUssRUFBRyxPQUFPLENBQUMsS0FBaUMsSUFBSSxFQUFFO1FBQ3ZELE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtLQUN2QixDQUFDLEVBQ0YsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUN2RCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQ2hCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUnhDb2FsZXNjaW5nT3B0aW9ucyB9IGZyb20gJ0ByeC1hbmd1bGFyL2Nkay9jb2FsZXNjaW5nJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJ4UmVuZGVyV29yaywgUnhTdHJhdGVneUNyZWRlbnRpYWxzIH0gZnJvbSAnLi9tb2RlbCc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogQHBhcmFtIHZhbHVlXG4gKiBAcGFyYW0gc3RyYXRlZ3lcbiAqIEBwYXJhbSB3b3JrRmFjdG9yeVxuICogQHBhcmFtIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uU3RyYXRlZ3k8VD4oXG4gIHZhbHVlOiBULFxuICBzdHJhdGVneTogUnhTdHJhdGVneUNyZWRlbnRpYWxzLFxuICB3b3JrRmFjdG9yeTogKFxuICAgIHZhbHVlOiBULFxuICAgIHdvcms6IFJ4UmVuZGVyV29yayxcbiAgICBvcHRpb25zOiBSeENvYWxlc2NpbmdPcHRpb25zXG4gICkgPT4gdm9pZCxcbiAgb3B0aW9uczogUnhDb2FsZXNjaW5nT3B0aW9ucyAmIHsgbmdab25lPzogTmdab25lIH0gPSB7fVxuKTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxUPigoc3Vic2NyaWJlcikgPT4ge1xuICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gIH0pLnBpcGUoXG4gICAgc3RyYXRlZ3kuYmVoYXZpb3Ioe1xuICAgICAgd29yazogKCkgPT4gd29ya0ZhY3RvcnkodmFsdWUsIHN0cmF0ZWd5LndvcmssIG9wdGlvbnMpLFxuICAgICAgc2NvcGU6IChvcHRpb25zLnNjb3BlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KSB8fCB7fSxcbiAgICAgIG5nWm9uZTogb3B0aW9ucy5uZ1pvbmUsXG4gICAgfSksXG4gICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHRocm93RXJyb3IoKCkgPT4gW2Vycm9yLCB2YWx1ZV0pKSxcbiAgICBtYXAoKCkgPT4gdmFsdWUpLFxuICAgIHRha2UoMSlcbiAgKTtcbn1cbiJdfQ==