import { coerceAllFactory } from '@rx-angular/cdk/coercing';
import { ReplaySubject } from 'rxjs';
import { map, share, startWith, switchAll } from 'rxjs/operators';
/**
 * @internal
 *
 * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`
 * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`
 *
 * @param defaultStrategyName
 * @param strategies
 */
export function strategyHandling(defaultStrategyName, strategies) {
    const hotFlattened = coerceAllFactory(() => new ReplaySubject(1), switchAll());
    return {
        strategy$: hotFlattened.values$.pipe(startWith(defaultStrategyName), nameToStrategyCredentials(strategies, defaultStrategyName), share()),
        next(name) {
            hotFlattened.next(name);
        },
    };
}
/**
 * @internal
 */
function nameToStrategyCredentials(strategies, defaultStrategyName) {
    return (o$) => o$.pipe(map((name) => name && Object.keys(strategies).includes(name)
        ? strategies[name]
        : strategies[defaultStrategyName]));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3ktaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay9yZW5kZXItc3RyYXRlZ2llcy9zcmMvbGliL3N0cmF0ZWd5LWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBWWxFOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixtQkFBMkIsRUFDM0IsVUFBK0M7SUFFL0MsTUFBTSxZQUFZLEdBQUcsZ0JBQWdCLENBQ25DLEdBQUcsRUFBRSxDQUFDLElBQUksYUFBYSxDQUFnRCxDQUFDLENBQUMsRUFDekUsU0FBUyxFQUFFLENBQ1osQ0FBQztJQUNGLE9BQU87UUFDTCxTQUFTLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2xDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxFQUM5Qix5QkFBeUIsQ0FBQyxVQUFVLEVBQUUsbUJBQW1CLENBQUMsRUFDMUQsS0FBSyxFQUFFLENBQzZCO1FBQ3RDLElBQUksQ0FBQyxJQUFtRDtZQUN0RCxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyx5QkFBeUIsQ0FDaEMsVUFBK0MsRUFDL0MsbUJBQTJCO0lBRTNCLE9BQU8sQ0FDTCxFQUF5QyxFQUNOLEVBQUUsQ0FDckMsRUFBRSxDQUFDLElBQUksQ0FDTCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNYLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDNUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDbEIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUNwQyxDQUNGLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlQWxsRmFjdG9yeSB9IGZyb20gJ0ByeC1hbmd1bGFyL2Nkay9jb2VyY2luZyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHNoYXJlLCBzdGFydFdpdGgsIHN3aXRjaEFsbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIFJ4Q3VzdG9tU3RyYXRlZ3lDcmVkZW50aWFscyxcbiAgUnhTdHJhdGVneUNyZWRlbnRpYWxzLFxuICBSeFN0cmF0ZWd5TmFtZXMsXG59IGZyb20gJy4vbW9kZWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJ4U3RyYXRlZ3lIYW5kbGVyIHtcbiAgc3RyYXRlZ3kkOiBPYnNlcnZhYmxlPFJ4U3RyYXRlZ3lDcmVkZW50aWFscz47XG4gIG5leHQobmFtZTogUnhTdHJhdGVneU5hbWVzIHwgT2JzZXJ2YWJsZTxSeFN0cmF0ZWd5TmFtZXM+KTogdm9pZDtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBBIGZhY3RvcnkgZnVuY3Rpb24gcmV0dXJuaW5nIGFuIG9iamVjdCB0byBoYW5kbGUgdGhlIHByb2Nlc3Mgb2YgdHVybmluZyBzdHJhdGVneSBuYW1lcyBpbnRvIGBSeFN0cmF0ZWd5Q3JlZGVudGlhbHNgXG4gKiBZb3UgY2FuIG5leHQgYSBzdHJhdGVneSBuYW1lIGFzIE9ic2VydmFibGUgb3Igc3RyaW5nIGFuZCBnZXQgYW4gT2JzZXJ2YWJsZSBvZiBgUnhTdHJhdGVneUNyZWRlbnRpYWxzYFxuICpcbiAqIEBwYXJhbSBkZWZhdWx0U3RyYXRlZ3lOYW1lXG4gKiBAcGFyYW0gc3RyYXRlZ2llc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyYXRlZ3lIYW5kbGluZyhcbiAgZGVmYXVsdFN0cmF0ZWd5TmFtZTogc3RyaW5nLFxuICBzdHJhdGVnaWVzOiBSeEN1c3RvbVN0cmF0ZWd5Q3JlZGVudGlhbHM8c3RyaW5nPlxuKTogUnhTdHJhdGVneUhhbmRsZXIge1xuICBjb25zdCBob3RGbGF0dGVuZWQgPSBjb2VyY2VBbGxGYWN0b3J5PHN0cmluZz4oXG4gICAgKCkgPT4gbmV3IFJlcGxheVN1YmplY3Q8UnhTdHJhdGVneU5hbWVzIHwgT2JzZXJ2YWJsZTxSeFN0cmF0ZWd5TmFtZXM+PigxKSxcbiAgICBzd2l0Y2hBbGwoKVxuICApO1xuICByZXR1cm4ge1xuICAgIHN0cmF0ZWd5JDogaG90RmxhdHRlbmVkLnZhbHVlcyQucGlwZShcbiAgICAgIHN0YXJ0V2l0aChkZWZhdWx0U3RyYXRlZ3lOYW1lKSxcbiAgICAgIG5hbWVUb1N0cmF0ZWd5Q3JlZGVudGlhbHMoc3RyYXRlZ2llcywgZGVmYXVsdFN0cmF0ZWd5TmFtZSksXG4gICAgICBzaGFyZSgpXG4gICAgKSBhcyBPYnNlcnZhYmxlPFJ4U3RyYXRlZ3lDcmVkZW50aWFscz4sXG4gICAgbmV4dChuYW1lOiBSeFN0cmF0ZWd5TmFtZXMgfCBPYnNlcnZhYmxlPFJ4U3RyYXRlZ3lOYW1lcz4pIHtcbiAgICAgIGhvdEZsYXR0ZW5lZC5uZXh0KG5hbWUpO1xuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIG5hbWVUb1N0cmF0ZWd5Q3JlZGVudGlhbHMoXG4gIHN0cmF0ZWdpZXM6IFJ4Q3VzdG9tU3RyYXRlZ3lDcmVkZW50aWFsczxzdHJpbmc+LFxuICBkZWZhdWx0U3RyYXRlZ3lOYW1lOiBzdHJpbmdcbikge1xuICByZXR1cm4gKFxuICAgIG8kOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ+XG4gICk6IE9ic2VydmFibGU8UnhTdHJhdGVneUNyZWRlbnRpYWxzPiA9PlxuICAgIG8kLnBpcGUoXG4gICAgICBtYXAoKG5hbWUpID0+XG4gICAgICAgIG5hbWUgJiYgT2JqZWN0LmtleXMoc3RyYXRlZ2llcykuaW5jbHVkZXMobmFtZSlcbiAgICAgICAgICA/IHN0cmF0ZWdpZXNbbmFtZV1cbiAgICAgICAgICA6IHN0cmF0ZWdpZXNbZGVmYXVsdFN0cmF0ZWd5TmFtZV1cbiAgICAgIClcbiAgICApO1xufVxuIl19