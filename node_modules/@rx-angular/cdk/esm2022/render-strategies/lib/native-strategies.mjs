import { NgZone } from '@angular/core';
import { coalesceWith } from '@rx-angular/cdk/coalescing';
import { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
const animationFrameTick = () => new Observable((subscriber) => {
    // use the unpatched API no avoid zone interference
    const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {
        subscriber.next(0);
        subscriber.complete();
    });
    return () => {
        // use the unpatched API no avoid zone interference
        getZoneUnPatchedApi('cancelAnimationFrame')(id);
    };
});
const localCredentials = {
    name: 'local',
    work: (cdRef, _, notification) => {
        cdRef.detectChanges();
    },
    behavior: ({ work, scope, ngZone }) => (o$) => o$.pipe(coalesceWith(animationFrameTick(), scope), tap(() => (ngZone ? ngZone.run(() => work()) : work()))),
};
const noopCredentials = {
    name: 'noop',
    work: () => void 0,
    behavior: () => (o$) => o$,
};
const nativeCredentials = {
    name: 'native',
    work: (cdRef) => cdRef.markForCheck(),
    behavior: ({ work, ngZone }) => (o$) => o$.pipe(tap(() => ngZone && !NgZone.isInAngularZone()
        ? ngZone.run(() => work())
        : work())),
};
export const RX_NATIVE_STRATEGIES = {
    native: nativeCredentials,
    noop: noopCredentials,
    local: localCredentials,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXN0cmF0ZWdpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay9yZW5kZXItc3RyYXRlZ2llcy9zcmMvbGliL25hdGl2ZS1zdHJhdGVnaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT3JDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxFQUFFLENBQzlCLElBQUksVUFBVSxDQUFTLENBQUMsVUFBVSxFQUFFLEVBQUU7SUFDcEMsbURBQW1EO0lBQ25ELE1BQU0sRUFBRSxHQUFHLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDLENBQUMsR0FBRyxFQUFFO1FBQzNELFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxHQUFHLEVBQUU7UUFDVixtREFBbUQ7UUFDbkQsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVMLE1BQU0sZ0JBQWdCLEdBQTBCO0lBQzlDLElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsRUFBRTtRQUMvQixLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUNELFFBQVEsRUFDTixDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQzVCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FDTCxFQUFFLENBQUMsSUFBSSxDQUNMLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLEtBQWdDLENBQUMsRUFDcEUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FDeEQ7Q0FDTixDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQTBCO0lBQzdDLElBQUksRUFBRSxNQUFNO0lBQ1osSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztJQUNsQixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7Q0FDM0IsQ0FBQztBQUVGLE1BQU0saUJBQWlCLEdBQTBCO0lBQy9DLElBQUksRUFBRSxRQUFRO0lBQ2QsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFO0lBQ3JDLFFBQVEsRUFDTixDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FDckIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUNMLEVBQUUsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUNQLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUU7UUFDakMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUNYLENBQ0Y7Q0FDTixDQUFDO0FBSUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQXVCO0lBQ3RELE1BQU0sRUFBRSxpQkFBaUI7SUFDekIsSUFBSSxFQUFFLGVBQWU7SUFDckIsS0FBSyxFQUFFLGdCQUFnQjtDQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2FsZXNjZVdpdGggfSBmcm9tICdAcngtYW5ndWxhci9jZGsvY29hbGVzY2luZyc7XG5pbXBvcnQgeyBnZXRab25lVW5QYXRjaGVkQXBpIH0gZnJvbSAnQHJ4LWFuZ3VsYXIvY2RrL2ludGVybmFscy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIFJ4Q3VzdG9tU3RyYXRlZ3lDcmVkZW50aWFscyxcbiAgUnhOYXRpdmVTdHJhdGVneU5hbWVzLFxuICBSeFN0cmF0ZWd5Q3JlZGVudGlhbHMsXG59IGZyb20gJy4vbW9kZWwnO1xuXG5jb25zdCBhbmltYXRpb25GcmFtZVRpY2sgPSAoKSA9PlxuICBuZXcgT2JzZXJ2YWJsZTxudW1iZXI+KChzdWJzY3JpYmVyKSA9PiB7XG4gICAgLy8gdXNlIHRoZSB1bnBhdGNoZWQgQVBJIG5vIGF2b2lkIHpvbmUgaW50ZXJmZXJlbmNlXG4gICAgY29uc3QgaWQgPSBnZXRab25lVW5QYXRjaGVkQXBpKCdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnKSgoKSA9PiB7XG4gICAgICBzdWJzY3JpYmVyLm5leHQoMCk7XG4gICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIHVzZSB0aGUgdW5wYXRjaGVkIEFQSSBubyBhdm9pZCB6b25lIGludGVyZmVyZW5jZVxuICAgICAgZ2V0Wm9uZVVuUGF0Y2hlZEFwaSgnY2FuY2VsQW5pbWF0aW9uRnJhbWUnKShpZCk7XG4gICAgfTtcbiAgfSk7XG5cbmNvbnN0IGxvY2FsQ3JlZGVudGlhbHM6IFJ4U3RyYXRlZ3lDcmVkZW50aWFscyA9IHtcbiAgbmFtZTogJ2xvY2FsJyxcbiAgd29yazogKGNkUmVmLCBfLCBub3RpZmljYXRpb24pID0+IHtcbiAgICBjZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gIH0sXG4gIGJlaGF2aW9yOlxuICAgICh7IHdvcmssIHNjb3BlLCBuZ1pvbmUgfSkgPT5cbiAgICAobyQpID0+XG4gICAgICBvJC5waXBlKFxuICAgICAgICBjb2FsZXNjZVdpdGgoYW5pbWF0aW9uRnJhbWVUaWNrKCksIHNjb3BlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KSxcbiAgICAgICAgdGFwKCgpID0+IChuZ1pvbmUgPyBuZ1pvbmUucnVuKCgpID0+IHdvcmsoKSkgOiB3b3JrKCkpKVxuICAgICAgKSxcbn07XG5cbmNvbnN0IG5vb3BDcmVkZW50aWFsczogUnhTdHJhdGVneUNyZWRlbnRpYWxzID0ge1xuICBuYW1lOiAnbm9vcCcsXG4gIHdvcms6ICgpID0+IHZvaWQgMCxcbiAgYmVoYXZpb3I6ICgpID0+IChvJCkgPT4gbyQsXG59O1xuXG5jb25zdCBuYXRpdmVDcmVkZW50aWFsczogUnhTdHJhdGVneUNyZWRlbnRpYWxzID0ge1xuICBuYW1lOiAnbmF0aXZlJyxcbiAgd29yazogKGNkUmVmKSA9PiBjZFJlZi5tYXJrRm9yQ2hlY2soKSxcbiAgYmVoYXZpb3I6XG4gICAgKHsgd29yaywgbmdab25lIH0pID0+XG4gICAgKG8kKSA9PlxuICAgICAgbyQucGlwZShcbiAgICAgICAgdGFwKCgpID0+XG4gICAgICAgICAgbmdab25lICYmICFOZ1pvbmUuaXNJbkFuZ3VsYXJab25lKClcbiAgICAgICAgICAgID8gbmdab25lLnJ1bigoKSA9PiB3b3JrKCkpXG4gICAgICAgICAgICA6IHdvcmsoKVxuICAgICAgICApXG4gICAgICApLFxufTtcblxuZXhwb3J0IHR5cGUgUnhOYXRpdmVTdHJhdGVnaWVzID1cbiAgUnhDdXN0b21TdHJhdGVneUNyZWRlbnRpYWxzPFJ4TmF0aXZlU3RyYXRlZ3lOYW1lcz47XG5leHBvcnQgY29uc3QgUlhfTkFUSVZFX1NUUkFURUdJRVM6IFJ4TmF0aXZlU3RyYXRlZ2llcyA9IHtcbiAgbmF0aXZlOiBuYXRpdmVDcmVkZW50aWFscyxcbiAgbm9vcDogbm9vcENyZWRlbnRpYWxzLFxuICBsb2NhbDogbG9jYWxDcmVkZW50aWFscyxcbn07XG4iXX0=