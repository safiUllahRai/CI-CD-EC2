import { convenienceMethods } from './convenience-methods';
import { zoneGlobalDisableConfigurationsKeys, zoneGlobalEventsConfigurationsKeys, zoneGlobalSettingsConfigurationsKeys, zoneRuntimeConfigurationsKeys, zoneTestDisableConfigurationsKeys, zoneTestSettingsConfigurationsKeys, } from './model/configurations.types';
const zoneDisable = '__Zone_disable_';
const zoneSymbol = '__zone_symbol__';
/**
 * https://angular.io/guide/zone#setting-up-zonejs
 **/
function assertZoneConfig() {
    if (window.Zone !== undefined) {
        // @TODO link to docs
        console.error('zone-flags file needs to get imported before zone.js');
    }
}
const addDisableFlag = (prop) => ({
    [prop]: () => {
        assertZoneConfig();
        return (window[zoneDisable + prop] = true);
    },
});
const addSymbolFlag = (prop) => ({
    [prop]: () => {
        assertZoneConfig();
        return (window[zoneSymbol + prop] = true);
    },
});
const addArraySymbolFlag = (prop) => ({
    [prop]: (eventNames) => {
        assertZoneConfig();
        const w = window;
        return (w[zoneSymbol + prop] = [
            ...(Array.isArray(w[zoneSymbol + prop]) ? w[zoneSymbol + prop] : []),
            ...eventNames,
        ]);
    },
});
const reduceToObject = (methodsArray) => {
    return methodsArray.reduce((map, item) => ({ ...map, ...item }), {});
};
/**
 * factory function to create a `RxZoneConfig` object.
 *
 * @Example
 * import { globalEvents,xhrEvent, zoneConfig} from '@rx-angular/cdk/zone-flags';
 *
 * const zoneConfig = createZoneFlagsConfigurator();
 *
 * zoneConfig.global.disable.requestAnimationFrame();
 * zoneConfig.global.disable.timers();
 * zoneConfig.events.disable.UNPATCHED_EVENTS([...globalEvents, ...xhrEvent]);
 *
 */
function createZoneFlagsConfigurator() {
    const cfg = globalThis;
    const configProps = [
        ...[
            ...zoneGlobalDisableConfigurationsKeys,
            ...zoneTestDisableConfigurationsKeys,
        ].map((prop) => zoneDisable + prop),
        ...[
            ...zoneGlobalSettingsConfigurationsKeys,
            ...zoneTestSettingsConfigurationsKeys,
            ...zoneGlobalEventsConfigurationsKeys,
            ...zoneRuntimeConfigurationsKeys,
        ].map((prop) => zoneSymbol + prop),
    ];
    // append as global method for easy debugging
    cfg.__rxa_zone_config__log = () => {
        configProps.forEach((flag) => {
            cfg[flag] && console.log(flag, cfg[flag]);
        });
    };
    const zoneConfigObj = {
        global: {
            disable: reduceToObject([
                ...zoneGlobalDisableConfigurationsKeys.map(addDisableFlag),
                ...zoneGlobalSettingsConfigurationsKeys.map(addSymbolFlag),
            ]),
        },
        test: {
            disable: reduceToObject([
                ...zoneTestDisableConfigurationsKeys.map(addDisableFlag),
                ...zoneTestSettingsConfigurationsKeys.map(addSymbolFlag),
            ]),
        },
        events: {
            disable: reduceToObject(zoneGlobalEventsConfigurationsKeys.map(addArraySymbolFlag)),
        },
        runtime: {
            disable: reduceToObject(zoneRuntimeConfigurationsKeys.map(addSymbolFlag)),
        },
    };
    return {
        ...zoneConfigObj,
        ...convenienceMethods(zoneConfigObj),
    };
}
/**
 * An object for typed zone-flags configuration.
 *
 * @Example
 *
 * create file `zone-flags.ts` parallel to your `polyfills.ts` and insert following content:
 * ```typescript
 * import { globalEvents, xhrEvent, zoneConfig} from '@rx-angular/cdk/zone-flags';
 *
 * zoneConfig.global.disable.requestAnimationFrame();
 * zoneConfig.global.disable.timers();
 * zoneConfig.events.disable.UNPATCHED_EVENTS([...globalEvents, ...xhrEvent]);
 * ```
 * In `polyfills.ts` above the zone import, import `zone-flags.ts`
 *
 * ```typescript
 * import './zone-flags';
 * // Zone JS is required by default for Angular itself.
 * import 'zone.js';
 * ```
 *
 */
export const zoneConfig = createZoneFlagsConfigurator();
//# sourceMappingURL=data:application/json;base64,