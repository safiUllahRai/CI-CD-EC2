import { coerceAllFactory } from '@rx-angular/cdk/coercing';
import { Subject } from 'rxjs';
import { mergeAll, share } from 'rxjs/operators';
/**
 * @internal
 *
 * A factory function returning an object to handle the process of switching templates by Notification channel.
 * You can next a Observable of `RxNotification` multiple times and merge them into the Observable exposed under `trigger$`
 *
 */
export function templateTriggerHandling() {
    const hotFlattened = coerceAllFactory(() => new Subject(), mergeAll());
    return {
        next(templateName) {
            hotFlattened.next(templateName);
        },
        trigger$: hotFlattened.values$.pipe(share()),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtdHJpZ2dlci1oYW5kbGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2RrL25vdGlmaWNhdGlvbnMvc3JjL2xpYi90ZW1wbGF0ZS10cmlnZ2VyLWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdqRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsdUJBQXVCO0lBSXJDLE1BQU0sWUFBWSxHQUFHLGdCQUFnQixDQUNuQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sRUFBcUQsRUFDdEUsUUFBUSxFQUFFLENBQ1gsQ0FBQztJQUNGLE9BQU87UUFDTCxJQUFJLENBQUMsWUFBK0Q7WUFDbEUsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBQ0QsUUFBUSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlQWxsRmFjdG9yeSB9IGZyb20gJ0ByeC1hbmd1bGFyL2Nkay9jb2VyY2luZyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtZXJnZUFsbCwgc2hhcmUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSeE5vdGlmaWNhdGlvbiB9IGZyb20gJy4vbW9kZWwnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIEEgZmFjdG9yeSBmdW5jdGlvbiByZXR1cm5pbmcgYW4gb2JqZWN0IHRvIGhhbmRsZSB0aGUgcHJvY2VzcyBvZiBzd2l0Y2hpbmcgdGVtcGxhdGVzIGJ5IE5vdGlmaWNhdGlvbiBjaGFubmVsLlxuICogWW91IGNhbiBuZXh0IGEgT2JzZXJ2YWJsZSBvZiBgUnhOb3RpZmljYXRpb25gIG11bHRpcGxlIHRpbWVzIGFuZCBtZXJnZSB0aGVtIGludG8gdGhlIE9ic2VydmFibGUgZXhwb3NlZCB1bmRlciBgdHJpZ2dlciRgXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVUcmlnZ2VySGFuZGxpbmc8VD4oKToge1xuICB0cmlnZ2VyJDogT2JzZXJ2YWJsZTxSeE5vdGlmaWNhdGlvbjxUPj47XG4gIG5leHQodGVtcGxhdGVOYW1lOiBPYnNlcnZhYmxlPFJ4Tm90aWZpY2F0aW9uPFQ+Pik6IHZvaWQ7XG59IHtcbiAgY29uc3QgaG90RmxhdHRlbmVkID0gY29lcmNlQWxsRmFjdG9yeShcbiAgICAoKSA9PiBuZXcgU3ViamVjdDxPYnNlcnZhYmxlPFJ4Tm90aWZpY2F0aW9uPFQ+IHwgUnhOb3RpZmljYXRpb248VD4+PigpLFxuICAgIG1lcmdlQWxsKClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBuZXh0KHRlbXBsYXRlTmFtZTogT2JzZXJ2YWJsZTxSeE5vdGlmaWNhdGlvbjxUPiB8IFJ4Tm90aWZpY2F0aW9uPFQ+Pikge1xuICAgICAgaG90RmxhdHRlbmVkLm5leHQodGVtcGxhdGVOYW1lKTtcbiAgICB9LFxuICAgIHRyaWdnZXIkOiBob3RGbGF0dGVuZWQudmFsdWVzJC5waXBlKHNoYXJlKCkpLFxuICB9O1xufVxuIl19