import { map, materialize, tap } from 'rxjs/operators';
export function rxMaterialize() {
    return (o$) => o$.pipe(materialize(), tap(({ kind, error }) => {
        // As we dont want to just swallow errors we log them here
        if (kind === 'E') {
            console.error(error);
        }
    }), map(({ value, error, kind, hasValue }) => {
        const rxNotificationKind = notificationKindToRxNotificationKind(kind);
        return {
            value,
            hasValue,
            error,
            kind: rxNotificationKind,
            complete: rxNotificationKind === "complete" /* RxNotificationKind.Complete */,
        };
    }));
}
/**
 * @internal
 *
 * @description
 * This function is here to turn RxJS notification kind values into RxNotification kind names.
 * The main reason for the naming is the RxNotification kind values map directly to the default
 * template names (`suspense`, `next`, `error` `complete`) in the directives of the template package
 */
export function notificationKindToRxNotificationKind(kind) {
    switch (kind) {
        case 'C':
            return "complete" /* RxNotificationKind.Complete */;
        case 'E':
            return "error" /* RxNotificationKind.Error */;
        case 'N':
        default:
            return "next" /* RxNotificationKind.Next */;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtbWF0ZXJpYWxpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay9ub3RpZmljYXRpb25zL3NyYy9saWIvcngtbWF0ZXJpYWxpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdkQsTUFBTSxVQUFVLGFBQWE7SUFDM0IsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQ1osRUFBRSxDQUFDLElBQUksQ0FDTCxXQUFXLEVBQUUsRUFDYixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3RCLDBEQUEwRDtRQUMxRCxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7SUFDSCxDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7UUFDdkMsTUFBTSxrQkFBa0IsR0FBRyxvQ0FBb0MsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RSxPQUFPO1lBQ0wsS0FBSztZQUNMLFFBQVE7WUFDUixLQUFLO1lBQ0wsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixRQUFRLEVBQUUsa0JBQWtCLGlEQUFnQztTQUM3RCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLG9DQUFvQyxDQUNsRCxJQUFtQztJQUVuQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQ2IsS0FBSyxHQUFHO1lBQ04sb0RBQW1DO1FBQ3JDLEtBQUssR0FBRztZQUNOLDhDQUFnQztRQUNsQyxLQUFLLEdBQUcsQ0FBQztRQUNUO1lBQ0UsNENBQStCO0lBQ25DLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm90aWZpY2F0aW9uLCBPcGVyYXRvckZ1bmN0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIG1hdGVyaWFsaXplLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSeE5vdGlmaWNhdGlvbiwgUnhOb3RpZmljYXRpb25LaW5kIH0gZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiByeE1hdGVyaWFsaXplPFQ+KCk6IE9wZXJhdG9yRnVuY3Rpb248VCwgUnhOb3RpZmljYXRpb248VD4+IHtcbiAgcmV0dXJuIChvJCkgPT5cbiAgICBvJC5waXBlKFxuICAgICAgbWF0ZXJpYWxpemUoKSxcbiAgICAgIHRhcCgoeyBraW5kLCBlcnJvciB9KSA9PiB7XG4gICAgICAgIC8vIEFzIHdlIGRvbnQgd2FudCB0byBqdXN0IHN3YWxsb3cgZXJyb3JzIHdlIGxvZyB0aGVtIGhlcmVcbiAgICAgICAgaWYgKGtpbmQgPT09ICdFJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIG1hcCgoeyB2YWx1ZSwgZXJyb3IsIGtpbmQsIGhhc1ZhbHVlIH0pID0+IHtcbiAgICAgICAgY29uc3QgcnhOb3RpZmljYXRpb25LaW5kID0gbm90aWZpY2F0aW9uS2luZFRvUnhOb3RpZmljYXRpb25LaW5kKGtpbmQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGhhc1ZhbHVlLFxuICAgICAgICAgIGVycm9yLFxuICAgICAgICAgIGtpbmQ6IHJ4Tm90aWZpY2F0aW9uS2luZCxcbiAgICAgICAgICBjb21wbGV0ZTogcnhOb3RpZmljYXRpb25LaW5kID09PSBSeE5vdGlmaWNhdGlvbktpbmQuQ29tcGxldGUsXG4gICAgICAgIH07XG4gICAgICB9KVxuICAgICk7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGhlcmUgdG8gdHVybiBSeEpTIG5vdGlmaWNhdGlvbiBraW5kIHZhbHVlcyBpbnRvIFJ4Tm90aWZpY2F0aW9uIGtpbmQgbmFtZXMuXG4gKiBUaGUgbWFpbiByZWFzb24gZm9yIHRoZSBuYW1pbmcgaXMgdGhlIFJ4Tm90aWZpY2F0aW9uIGtpbmQgdmFsdWVzIG1hcCBkaXJlY3RseSB0byB0aGUgZGVmYXVsdFxuICogdGVtcGxhdGUgbmFtZXMgKGBzdXNwZW5zZWAsIGBuZXh0YCwgYGVycm9yYCBgY29tcGxldGVgKSBpbiB0aGUgZGlyZWN0aXZlcyBvZiB0aGUgdGVtcGxhdGUgcGFja2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm90aWZpY2F0aW9uS2luZFRvUnhOb3RpZmljYXRpb25LaW5kKFxuICBraW5kOiBOb3RpZmljYXRpb248dW5rbm93bj5bJ2tpbmQnXVxuKTogUnhOb3RpZmljYXRpb25LaW5kIHtcbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSAnQyc6XG4gICAgICByZXR1cm4gUnhOb3RpZmljYXRpb25LaW5kLkNvbXBsZXRlO1xuICAgIGNhc2UgJ0UnOlxuICAgICAgcmV0dXJuIFJ4Tm90aWZpY2F0aW9uS2luZC5FcnJvcjtcbiAgICBjYXNlICdOJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFJ4Tm90aWZpY2F0aW9uS2luZC5OZXh0O1xuICB9XG59XG4iXX0=