import { isDefined, isKeyOf, isObjectGuard } from '../_internals/guards';
/**
 * @description
 * Accepts an object of type T and key of type K extends keyof T.
 * Removes property from an object and returns a shallow copy of the updated object without specified property.
 * If property not found returns copy of the original object.
 * Not mutating original object.
 *
 * @example
 *
 * const cat = {id: 1, type: 'cat', name: 'Fluffy'};
 *
 * const anonymusCat = deleteProp(cat, 'name');
 *
 * // anonymusCat will be:
 * // {id: 1, type: 'cat'};
 *
 * @example
 * // Usage with RxState
 *
 * export class ProfileComponent {
 *
 *    readonly removeName$ = new Subject();
 *
 *    constructor(private state: RxState<ComponentState>) {
 *      // Reactive implementation
 *      state.connect(
 *        this.removeName$,
 *        (state) => {
 *            return deleteProp(state, 'name');
 *        }
 *      );
 *    }
 *
 *    // Imperative implementation
 *    removeName(): void {
 *        this.state.set(remove(this.get(), 'name'));
 *    }
 * }
 *
 * @returns Omit<T, K>
 *
 * @docsPage deleteProp
 * @docsCategory transformation-helpers
 */
export function deleteProp(object, key) {
    if (!isDefined(object) || !isObjectGuard(object)) {
        console.warn(`DeleteProp: original value ${object} is not an object.`);
        return object;
    }
    if (!isKeyOf(key)) {
        console.warn(`DeleteProp: provided key is not a string, number or symbol.`);
        return { ...object };
    }
    const copy = { ...object };
    delete copy[key];
    return copy;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlUHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2RrL3RyYW5zZm9ybWF0aW9ucy9zcmMvbGliL29iamVjdC9kZWxldGVQcm9wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXpFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkNHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsTUFBUyxFQUNULEdBQU07SUFFTixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDakQsT0FBTyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsTUFBTSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBTyxDQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLElBQUksR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7SUFDM0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEZWZpbmVkLCBpc0tleU9mLCBpc09iamVjdEd1YXJkIH0gZnJvbSAnLi4vX2ludGVybmFscy9ndWFyZHMnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogQWNjZXB0cyBhbiBvYmplY3Qgb2YgdHlwZSBUIGFuZCBrZXkgb2YgdHlwZSBLIGV4dGVuZHMga2V5b2YgVC5cbiAqIFJlbW92ZXMgcHJvcGVydHkgZnJvbSBhbiBvYmplY3QgYW5kIHJldHVybnMgYSBzaGFsbG93IGNvcHkgb2YgdGhlIHVwZGF0ZWQgb2JqZWN0IHdpdGhvdXQgc3BlY2lmaWVkIHByb3BlcnR5LlxuICogSWYgcHJvcGVydHkgbm90IGZvdW5kIHJldHVybnMgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICogTm90IG11dGF0aW5nIG9yaWdpbmFsIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGNvbnN0IGNhdCA9IHtpZDogMSwgdHlwZTogJ2NhdCcsIG5hbWU6ICdGbHVmZnknfTtcbiAqXG4gKiBjb25zdCBhbm9ueW11c0NhdCA9IGRlbGV0ZVByb3AoY2F0LCAnbmFtZScpO1xuICpcbiAqIC8vIGFub255bXVzQ2F0IHdpbGwgYmU6XG4gKiAvLyB7aWQ6IDEsIHR5cGU6ICdjYXQnfTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVXNhZ2Ugd2l0aCBSeFN0YXRlXG4gKlxuICogZXhwb3J0IGNsYXNzIFByb2ZpbGVDb21wb25lbnQge1xuICpcbiAqICAgIHJlYWRvbmx5IHJlbW92ZU5hbWUkID0gbmV3IFN1YmplY3QoKTtcbiAqXG4gKiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0YXRlOiBSeFN0YXRlPENvbXBvbmVudFN0YXRlPikge1xuICogICAgICAvLyBSZWFjdGl2ZSBpbXBsZW1lbnRhdGlvblxuICogICAgICBzdGF0ZS5jb25uZWN0KFxuICogICAgICAgIHRoaXMucmVtb3ZlTmFtZSQsXG4gKiAgICAgICAgKHN0YXRlKSA9PiB7XG4gKiAgICAgICAgICAgIHJldHVybiBkZWxldGVQcm9wKHN0YXRlLCAnbmFtZScpO1xuICogICAgICAgIH1cbiAqICAgICAgKTtcbiAqICAgIH1cbiAqXG4gKiAgICAvLyBJbXBlcmF0aXZlIGltcGxlbWVudGF0aW9uXG4gKiAgICByZW1vdmVOYW1lKCk6IHZvaWQge1xuICogICAgICAgIHRoaXMuc3RhdGUuc2V0KHJlbW92ZSh0aGlzLmdldCgpLCAnbmFtZScpKTtcbiAqICAgIH1cbiAqIH1cbiAqXG4gKiBAcmV0dXJucyBPbWl0PFQsIEs+XG4gKlxuICogQGRvY3NQYWdlIGRlbGV0ZVByb3BcbiAqIEBkb2NzQ2F0ZWdvcnkgdHJhbnNmb3JtYXRpb24taGVscGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlUHJvcDxUIGV4dGVuZHMgb2JqZWN0LCBLIGV4dGVuZHMga2V5b2YgVD4oXG4gIG9iamVjdDogVCxcbiAga2V5OiBLXG4pOiBPbWl0PFQsIEs+IHtcbiAgaWYgKCFpc0RlZmluZWQob2JqZWN0KSB8fCAhaXNPYmplY3RHdWFyZChvYmplY3QpKSB7XG4gICAgY29uc29sZS53YXJuKGBEZWxldGVQcm9wOiBvcmlnaW5hbCB2YWx1ZSAke29iamVjdH0gaXMgbm90IGFuIG9iamVjdC5gKTtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgaWYgKCFpc0tleU9mPFQ+KGtleSkpIHtcbiAgICBjb25zb2xlLndhcm4oYERlbGV0ZVByb3A6IHByb3ZpZGVkIGtleSBpcyBub3QgYSBzdHJpbmcsIG51bWJlciBvciBzeW1ib2wuYCk7XG4gICAgcmV0dXJuIHsgLi4ub2JqZWN0IH07XG4gIH1cblxuICBjb25zdCBjb3B5ID0geyAuLi5vYmplY3QgfTtcbiAgZGVsZXRlIGNvcHlba2V5XTtcbiAgcmV0dXJuIGNvcHk7XG59XG4iXX0=