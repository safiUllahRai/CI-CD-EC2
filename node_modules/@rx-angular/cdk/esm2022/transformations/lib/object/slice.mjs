import { isDefined, isKeyOf, isObjectGuard } from '../_internals/guards';
/**
 * @description
 * Accepts an object of type T and single key or array of keys (K extends keyof T).
 * Constructs new object based on provided keys.
 *
 * @example
 *
 * const cat = {id: 1, type: 'cat', name: 'Fluffy'};
 *
 * const catWithoutType = slice(cat, ['name', 'id']);
 *
 * // catWithoutType will be:
 * // {id: 1, name: 'Fluffy'};
 *
 * @example
 * // Usage with RxState
 *
 * export class AnimalsListComponent {
 *
 *    constructor(private state: RxState<ComponentState>, private api: ApiService) {
 *      state.connect(
 *        'animals'
 *        this.api.getAnimals(),
 *        (state, animals) => {
 *            return animals.map(animal => slice(animal, ['id', 'name']));
 *        }
 *      );
 *    }
 * }
 *
 * @returns T
 *
 * @docsPage slice
 * @docsCategory transformation-helpers
 */
export function slice(object, keys) {
    const objectIsObject = isDefined(object) && isObjectGuard(object);
    if (!objectIsObject) {
        console.warn(`slice: original value (${object}) is not an object.`);
        return undefined;
    }
    const sanitizedKeys = (Array.isArray(keys) ? keys : [keys]).filter((k) => isKeyOf(k) && k in object);
    if (!sanitizedKeys.length) {
        console.warn(`slice: provided keys not found`);
        return undefined;
    }
    return sanitizedKeys.reduce((acc, k) => ({ ...acc, [k]: object[k] }), {});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay90cmFuc2Zvcm1hdGlvbnMvc3JjL2xpYi9vYmplY3Qvc2xpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFekU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQ0c7QUFDSCxNQUFNLFVBQVUsS0FBSyxDQUNuQixNQUFTLEVBQ1QsSUFBYTtJQUViLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbEUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLE1BQU0scUJBQXFCLENBQUMsQ0FBQztRQUNwRSxPQUFPLFNBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUNoRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQ3BDLENBQUM7SUFFRixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUMvQyxPQUFPLFNBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVELE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FDekIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUN4QyxFQUFnQixDQUNqQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGVmaW5lZCwgaXNLZXlPZiwgaXNPYmplY3RHdWFyZCB9IGZyb20gJy4uL19pbnRlcm5hbHMvZ3VhcmRzJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFjY2VwdHMgYW4gb2JqZWN0IG9mIHR5cGUgVCBhbmQgc2luZ2xlIGtleSBvciBhcnJheSBvZiBrZXlzIChLIGV4dGVuZHMga2V5b2YgVCkuXG4gKiBDb25zdHJ1Y3RzIG5ldyBvYmplY3QgYmFzZWQgb24gcHJvdmlkZWQga2V5cy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGNvbnN0IGNhdCA9IHtpZDogMSwgdHlwZTogJ2NhdCcsIG5hbWU6ICdGbHVmZnknfTtcbiAqXG4gKiBjb25zdCBjYXRXaXRob3V0VHlwZSA9IHNsaWNlKGNhdCwgWyduYW1lJywgJ2lkJ10pO1xuICpcbiAqIC8vIGNhdFdpdGhvdXRUeXBlIHdpbGwgYmU6XG4gKiAvLyB7aWQ6IDEsIG5hbWU6ICdGbHVmZnknfTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVXNhZ2Ugd2l0aCBSeFN0YXRlXG4gKlxuICogZXhwb3J0IGNsYXNzIEFuaW1hbHNMaXN0Q29tcG9uZW50IHtcbiAqXG4gKiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0YXRlOiBSeFN0YXRlPENvbXBvbmVudFN0YXRlPiwgcHJpdmF0ZSBhcGk6IEFwaVNlcnZpY2UpIHtcbiAqICAgICAgc3RhdGUuY29ubmVjdChcbiAqICAgICAgICAnYW5pbWFscydcbiAqICAgICAgICB0aGlzLmFwaS5nZXRBbmltYWxzKCksXG4gKiAgICAgICAgKHN0YXRlLCBhbmltYWxzKSA9PiB7XG4gKiAgICAgICAgICAgIHJldHVybiBhbmltYWxzLm1hcChhbmltYWwgPT4gc2xpY2UoYW5pbWFsLCBbJ2lkJywgJ25hbWUnXSkpO1xuICogICAgICAgIH1cbiAqICAgICAgKTtcbiAqICAgIH1cbiAqIH1cbiAqXG4gKiBAcmV0dXJucyBUXG4gKlxuICogQGRvY3NQYWdlIHNsaWNlXG4gKiBAZG9jc0NhdGVnb3J5IHRyYW5zZm9ybWF0aW9uLWhlbHBlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlPFQgZXh0ZW5kcyBvYmplY3QsIEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgb2JqZWN0OiBULFxuICBrZXlzOiBLIHwgS1tdXG4pOiBQaWNrPFQsIEs+IHtcbiAgY29uc3Qgb2JqZWN0SXNPYmplY3QgPSBpc0RlZmluZWQob2JqZWN0KSAmJiBpc09iamVjdEd1YXJkKG9iamVjdCk7XG5cbiAgaWYgKCFvYmplY3RJc09iamVjdCkge1xuICAgIGNvbnNvbGUud2Fybihgc2xpY2U6IG9yaWdpbmFsIHZhbHVlICgke29iamVjdH0pIGlzIG5vdCBhbiBvYmplY3QuYCk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZCBhcyBhbnk7XG4gIH1cblxuICBjb25zdCBzYW5pdGl6ZWRLZXlzID0gKEFycmF5LmlzQXJyYXkoa2V5cykgPyBrZXlzIDogW2tleXNdKS5maWx0ZXIoXG4gICAgKGspID0+IGlzS2V5T2Y8VD4oaykgJiYgayBpbiBvYmplY3RcbiAgKTtcblxuICBpZiAoIXNhbml0aXplZEtleXMubGVuZ3RoKSB7XG4gICAgY29uc29sZS53YXJuKGBzbGljZTogcHJvdmlkZWQga2V5cyBub3QgZm91bmRgKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkIGFzIGFueTtcbiAgfVxuXG4gIHJldHVybiBzYW5pdGl6ZWRLZXlzLnJlZHVjZShcbiAgICAoYWNjLCBrKSA9PiAoeyAuLi5hY2MsIFtrXTogb2JqZWN0W2tdIH0pLFxuICAgIHt9IGFzIFBpY2s8VCwgSz5cbiAgKTtcbn1cbiJdfQ==