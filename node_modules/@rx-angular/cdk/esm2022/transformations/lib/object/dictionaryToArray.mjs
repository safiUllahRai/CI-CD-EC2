import { isDefined, isObjectGuard } from '../_internals/guards';
/**
 * @description
 * Converts a dictionary of type {[key: string]: T} to array T[].
 *
 * @example
 *
 * const creaturesDictionary = {
 *   '1': {id: 1, type: 'cat'},
 *   '2': {id: 2, type: 'dog'},
 *   '3': {id: 3, type: 'parrot'}
 * };
 *
 * const creaturesArray = dictionaryToArray(creaturesDictionary);
 *
 * // creaturesArray will be:
 * // [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}];
 *
 * @example
 * // Usage with RxState
 *
 * export class ListComponent {
 *    readonly removeName$ = new Subject();
 *
 *    constructor(
 *      private state: RxState<ComponentState>,
 *      private api: ApiService
 *    ) {
 *      // Reactive implementation
 *      state.connect(
 *        'creatures',
 *        this.api.creaturesDictionary$,
 *        (_, creatures) => {
 *            return dictionaryToArray(creatures);
 *        }
 *      );
 *    }
 *
 *    // Imperative implementation
 *    removeName(): void {
 *      this.api.creaturesDictionary$.pipe(
 *        // subscription handling logic
 *      ).subscribe(
 *        dictionary => this.set({creatures: dictionaryToArray(dictionary)})
 *      );
 *    }
 * }
 *
 * @returns T[];
 *
 * @docsPage dictionaryToArray
 * @docsCategory transformation-helpers
 */
export function dictionaryToArray(dictionary) {
    if (!isDefined(dictionary)) {
        return dictionary;
    }
    if (!isObjectGuard(dictionary)) {
        console.warn(`DictionaryToArray: unexpected input.`);
        return [];
    }
    return Object.values(dictionary);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGljdGlvbmFyeVRvQXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay90cmFuc2Zvcm1hdGlvbnMvc3JjL2xpYi9vYmplY3QvZGljdGlvbmFyeVRvQXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbURHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFJLFVBQWdDO0lBQ25FLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUMzQixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNyRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGVmaW5lZCwgaXNPYmplY3RHdWFyZCB9IGZyb20gJy4uL19pbnRlcm5hbHMvZ3VhcmRzJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIGEgZGljdGlvbmFyeSBvZiB0eXBlIHtba2V5OiBzdHJpbmddOiBUfSB0byBhcnJheSBUW10uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBjb25zdCBjcmVhdHVyZXNEaWN0aW9uYXJ5ID0ge1xuICogICAnMSc6IHtpZDogMSwgdHlwZTogJ2NhdCd9LFxuICogICAnMic6IHtpZDogMiwgdHlwZTogJ2RvZyd9LFxuICogICAnMyc6IHtpZDogMywgdHlwZTogJ3BhcnJvdCd9XG4gKiB9O1xuICpcbiAqIGNvbnN0IGNyZWF0dXJlc0FycmF5ID0gZGljdGlvbmFyeVRvQXJyYXkoY3JlYXR1cmVzRGljdGlvbmFyeSk7XG4gKlxuICogLy8gY3JlYXR1cmVzQXJyYXkgd2lsbCBiZTpcbiAqIC8vIFt7aWQ6IDEsIHR5cGU6ICdjYXQnfSwge2lkOiAyLCB0eXBlOiAnZG9nJ30sIHtpZDogMywgdHlwZTogJ3BhcnJvdCd9XTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVXNhZ2Ugd2l0aCBSeFN0YXRlXG4gKlxuICogZXhwb3J0IGNsYXNzIExpc3RDb21wb25lbnQge1xuICogICAgcmVhZG9ubHkgcmVtb3ZlTmFtZSQgPSBuZXcgU3ViamVjdCgpO1xuICpcbiAqICAgIGNvbnN0cnVjdG9yKFxuICogICAgICBwcml2YXRlIHN0YXRlOiBSeFN0YXRlPENvbXBvbmVudFN0YXRlPixcbiAqICAgICAgcHJpdmF0ZSBhcGk6IEFwaVNlcnZpY2VcbiAqICAgICkge1xuICogICAgICAvLyBSZWFjdGl2ZSBpbXBsZW1lbnRhdGlvblxuICogICAgICBzdGF0ZS5jb25uZWN0KFxuICogICAgICAgICdjcmVhdHVyZXMnLFxuICogICAgICAgIHRoaXMuYXBpLmNyZWF0dXJlc0RpY3Rpb25hcnkkLFxuICogICAgICAgIChfLCBjcmVhdHVyZXMpID0+IHtcbiAqICAgICAgICAgICAgcmV0dXJuIGRpY3Rpb25hcnlUb0FycmF5KGNyZWF0dXJlcyk7XG4gKiAgICAgICAgfVxuICogICAgICApO1xuICogICAgfVxuICpcbiAqICAgIC8vIEltcGVyYXRpdmUgaW1wbGVtZW50YXRpb25cbiAqICAgIHJlbW92ZU5hbWUoKTogdm9pZCB7XG4gKiAgICAgIHRoaXMuYXBpLmNyZWF0dXJlc0RpY3Rpb25hcnkkLnBpcGUoXG4gKiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGhhbmRsaW5nIGxvZ2ljXG4gKiAgICAgICkuc3Vic2NyaWJlKFxuICogICAgICAgIGRpY3Rpb25hcnkgPT4gdGhpcy5zZXQoe2NyZWF0dXJlczogZGljdGlvbmFyeVRvQXJyYXkoZGljdGlvbmFyeSl9KVxuICogICAgICApO1xuICogICAgfVxuICogfVxuICpcbiAqIEByZXR1cm5zIFRbXTtcbiAqXG4gKiBAZG9jc1BhZ2UgZGljdGlvbmFyeVRvQXJyYXlcbiAqIEBkb2NzQ2F0ZWdvcnkgdHJhbnNmb3JtYXRpb24taGVscGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGljdGlvbmFyeVRvQXJyYXk8VD4oZGljdGlvbmFyeTogeyBba2V5OiBzdHJpbmddOiBUIH0pOiBUW10ge1xuICBpZiAoIWlzRGVmaW5lZChkaWN0aW9uYXJ5KSkge1xuICAgIHJldHVybiBkaWN0aW9uYXJ5O1xuICB9XG5cbiAgaWYgKCFpc09iamVjdEd1YXJkKGRpY3Rpb25hcnkpKSB7XG4gICAgY29uc29sZS53YXJuKGBEaWN0aW9uYXJ5VG9BcnJheTogdW5leHBlY3RlZCBpbnB1dC5gKTtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhkaWN0aW9uYXJ5KTtcbn1cbiJdfQ==