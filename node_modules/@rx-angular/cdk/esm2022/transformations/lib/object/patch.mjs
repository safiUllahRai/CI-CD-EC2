import { isObjectGuard } from '../_internals/guards';
/**
 * @description
 * Merges an object of type T with updates of type Partial<T>.
 * Returns a new object where updates override original values while not mutating the original one.

 * @example
 * interface Creature {
 *  id: number,
 *  type: string,
 *  name: string
 * }
 *
 * const cat = {id: 1, type: 'cat'};
 *
 * const catWithname = patch(cat, {name: 'Fluffy'});
 *
 * // catWithname will be:
 * // {id: 1, type: 'cat', name: 'Fluffy'};
 *
 * @example
 * // Usage with RxState
 *
 * export class ProfileComponent {
 *
 *    readonly changeName$ = new Subject<string>();
 *
 *    constructor(private state: RxState<ComponentState>) {
 *      // Reactive implementation
 *      state.connect(
 *        this.changeName$,
 *        (state, name) => {
 *            return patch(state, { name });
 *        }
 *      );
 *    }
 *
 *    // Imperative implementation
 *    changeName(name: string): void {
 *        this.state.set(patch(this.get(), { name }));
 *    }
 * }
 *
 * @returns T
 *
 * @docsPage patch
 * @docsCategory transformation-helpers
 */
export function patch(object, upd) {
    const update = isObjectGuard(upd) ? upd : {};
    if (!isObjectGuard(object) && isObjectGuard(upd)) {
        console.warn(`Patch: original value ${object} is not an object.`);
        return { ...update };
    }
    if (!isObjectGuard(object) && !isObjectGuard(upd)) {
        console.warn(`Patch: original value ${object} and updates ${upd} are not objects.`);
        return object;
    }
    return { ...object, ...update };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay90cmFuc2Zvcm1hdGlvbnMvc3JjL2xpYi9vYmplY3QvcGF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOENHO0FBQ0gsTUFBTSxVQUFVLEtBQUssQ0FBbUIsTUFBUyxFQUFFLEdBQWU7SUFDaEUsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUU3QyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXlCLE1BQU0sb0JBQW9CLENBQUMsQ0FBQztRQUNsRSxPQUFPLEVBQUUsR0FBRyxNQUFNLEVBQU8sQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxJQUFJLENBQ1YseUJBQXlCLE1BQU0sZ0JBQWdCLEdBQUcsbUJBQW1CLENBQ3RFLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsT0FBTyxFQUFFLEdBQUcsTUFBTSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDbEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzT2JqZWN0R3VhcmQgfSBmcm9tICcuLi9faW50ZXJuYWxzL2d1YXJkcyc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNZXJnZXMgYW4gb2JqZWN0IG9mIHR5cGUgVCB3aXRoIHVwZGF0ZXMgb2YgdHlwZSBQYXJ0aWFsPFQ+LlxuICogUmV0dXJucyBhIG5ldyBvYmplY3Qgd2hlcmUgdXBkYXRlcyBvdmVycmlkZSBvcmlnaW5hbCB2YWx1ZXMgd2hpbGUgbm90IG11dGF0aW5nIHRoZSBvcmlnaW5hbCBvbmUuXG5cbiAqIEBleGFtcGxlXG4gKiBpbnRlcmZhY2UgQ3JlYXR1cmUge1xuICogIGlkOiBudW1iZXIsXG4gKiAgdHlwZTogc3RyaW5nLFxuICogIG5hbWU6IHN0cmluZ1xuICogfVxuICpcbiAqIGNvbnN0IGNhdCA9IHtpZDogMSwgdHlwZTogJ2NhdCd9O1xuICpcbiAqIGNvbnN0IGNhdFdpdGhuYW1lID0gcGF0Y2goY2F0LCB7bmFtZTogJ0ZsdWZmeSd9KTtcbiAqXG4gKiAvLyBjYXRXaXRobmFtZSB3aWxsIGJlOlxuICogLy8ge2lkOiAxLCB0eXBlOiAnY2F0JywgbmFtZTogJ0ZsdWZmeSd9O1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2FnZSB3aXRoIFJ4U3RhdGVcbiAqXG4gKiBleHBvcnQgY2xhc3MgUHJvZmlsZUNvbXBvbmVudCB7XG4gKlxuICogICAgcmVhZG9ubHkgY2hhbmdlTmFtZSQgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG4gKlxuICogICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdGF0ZTogUnhTdGF0ZTxDb21wb25lbnRTdGF0ZT4pIHtcbiAqICAgICAgLy8gUmVhY3RpdmUgaW1wbGVtZW50YXRpb25cbiAqICAgICAgc3RhdGUuY29ubmVjdChcbiAqICAgICAgICB0aGlzLmNoYW5nZU5hbWUkLFxuICogICAgICAgIChzdGF0ZSwgbmFtZSkgPT4ge1xuICogICAgICAgICAgICByZXR1cm4gcGF0Y2goc3RhdGUsIHsgbmFtZSB9KTtcbiAqICAgICAgICB9XG4gKiAgICAgICk7XG4gKiAgICB9XG4gKlxuICogICAgLy8gSW1wZXJhdGl2ZSBpbXBsZW1lbnRhdGlvblxuICogICAgY2hhbmdlTmFtZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAqICAgICAgICB0aGlzLnN0YXRlLnNldChwYXRjaCh0aGlzLmdldCgpLCB7IG5hbWUgfSkpO1xuICogICAgfVxuICogfVxuICpcbiAqIEByZXR1cm5zIFRcbiAqXG4gKiBAZG9jc1BhZ2UgcGF0Y2hcbiAqIEBkb2NzQ2F0ZWdvcnkgdHJhbnNmb3JtYXRpb24taGVscGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGF0Y2g8VCBleHRlbmRzIG9iamVjdD4ob2JqZWN0OiBULCB1cGQ6IFBhcnRpYWw8VD4pOiBUIHtcbiAgY29uc3QgdXBkYXRlID0gaXNPYmplY3RHdWFyZCh1cGQpID8gdXBkIDoge307XG5cbiAgaWYgKCFpc09iamVjdEd1YXJkKG9iamVjdCkgJiYgaXNPYmplY3RHdWFyZCh1cGQpKSB7XG4gICAgY29uc29sZS53YXJuKGBQYXRjaDogb3JpZ2luYWwgdmFsdWUgJHtvYmplY3R9IGlzIG5vdCBhbiBvYmplY3QuYCk7XG4gICAgcmV0dXJuIHsgLi4udXBkYXRlIH0gYXMgVDtcbiAgfVxuXG4gIGlmICghaXNPYmplY3RHdWFyZChvYmplY3QpICYmICFpc09iamVjdEd1YXJkKHVwZCkpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgUGF0Y2g6IG9yaWdpbmFsIHZhbHVlICR7b2JqZWN0fSBhbmQgdXBkYXRlcyAke3VwZH0gYXJlIG5vdCBvYmplY3RzLmBcbiAgICApO1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICByZXR1cm4geyAuLi5vYmplY3QsIC4uLnVwZGF0ZSB9O1xufVxuIl19