import { isDefined, isKeyOf, isObjectGuard, } from '../_internals/guards';
/**
 * @description
 * Toggles a boolean property in the object.
 * Accepts object of type T and key value of which is boolean.
 * Toggles the property and returns a shallow copy of an object, while not mutating the original one.
 *
 * @example
 *
 * const state = {items: [1,2,3], loading: true};
 *
 * const updatedState = toggle(state, 'loading');
 *
 * // updatedState will be:
 * // {items: [1,2,3], loading: false};
 *
 * @example
 * // Usage with RxState
 *
 * export class ListComponent {
 *    readonly loadingChange$ = new Subject();
 *
 *    constructor(
 *      private state: RxState<ComponentState>
 *    ) {
 *      // Reactive implementation
 *      state.connect(
 *        this.api.loadingChange$,
 *        (state, _) => {
 *            return toggle(state, 'isLoading');
 *        }
 *      );
 *    }
 *
 *    // Imperative implementation
 *    toggleLoading(): void {
 *      this.set(toggle(state, 'isLoading'));
 *    }
 * }
 *
 * @returns T
 *
 * @docsPage toggle
 * @docsCategory transformation-helpers
 */
export function toggle(object, key) {
    const objectIsObject = isObjectGuard(object);
    const keyIsValid = isKeyOf(key);
    const initialObject = objectIsObject ? object : {};
    if (!objectIsObject) {
        console.warn(`Toggle: original value (${object}) is not an object.`);
    }
    if (!keyIsValid) {
        console.warn(`Toggle: key argument (${key}) is invalid.`);
    }
    if (keyIsValid && typeof initialObject[key] !== 'boolean') {
        console.warn(`Toggle: value of the key (${String(key)}) is not a boolean.`);
    }
    if (!isDefined(object) && !keyIsValid) {
        return object;
    }
    if (keyIsValid &&
        (typeof initialObject[key] === 'boolean' ||
            !initialObject.hasOwnProperty(key))) {
        return { ...initialObject, [key]: !initialObject[key] };
    }
    return { ...initialObject };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvdHJhbnNmb3JtYXRpb25zL3NyYy9saWIvb2JqZWN0L3RvZ2dsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE9BQU8sRUFDUCxhQUFhLEdBRWQsTUFBTSxzQkFBc0IsQ0FBQztBQUU5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTJDRztBQUVILE1BQU0sVUFBVSxNQUFNLENBQ3BCLE1BQVMsRUFDVCxHQUF1QztJQUV2QyxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0MsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxFQUFRLENBQUM7SUFFMUQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLE1BQU0scUJBQXFCLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXlCLEdBQUcsZUFBZSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELElBQUksVUFBVSxJQUFJLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQzFELE9BQU8sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLE1BQU0sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUNFLFVBQVU7UUFDVixDQUFDLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVM7WUFDdEMsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ3JDLENBQUM7UUFDRCxPQUFPLEVBQUUsR0FBRyxhQUFhLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRCxPQUFPLEVBQUUsR0FBRyxhQUFhLEVBQUUsQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgaXNEZWZpbmVkLFxuICBpc0tleU9mLFxuICBpc09iamVjdEd1YXJkLFxuICBPbmx5S2V5c09mU3BlY2lmaWNUeXBlLFxufSBmcm9tICcuLi9faW50ZXJuYWxzL2d1YXJkcyc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUb2dnbGVzIGEgYm9vbGVhbiBwcm9wZXJ0eSBpbiB0aGUgb2JqZWN0LlxuICogQWNjZXB0cyBvYmplY3Qgb2YgdHlwZSBUIGFuZCBrZXkgdmFsdWUgb2Ygd2hpY2ggaXMgYm9vbGVhbi5cbiAqIFRvZ2dsZXMgdGhlIHByb3BlcnR5IGFuZCByZXR1cm5zIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdCwgd2hpbGUgbm90IG11dGF0aW5nIHRoZSBvcmlnaW5hbCBvbmUuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBjb25zdCBzdGF0ZSA9IHtpdGVtczogWzEsMiwzXSwgbG9hZGluZzogdHJ1ZX07XG4gKlxuICogY29uc3QgdXBkYXRlZFN0YXRlID0gdG9nZ2xlKHN0YXRlLCAnbG9hZGluZycpO1xuICpcbiAqIC8vIHVwZGF0ZWRTdGF0ZSB3aWxsIGJlOlxuICogLy8ge2l0ZW1zOiBbMSwyLDNdLCBsb2FkaW5nOiBmYWxzZX07XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFVzYWdlIHdpdGggUnhTdGF0ZVxuICpcbiAqIGV4cG9ydCBjbGFzcyBMaXN0Q29tcG9uZW50IHtcbiAqICAgIHJlYWRvbmx5IGxvYWRpbmdDaGFuZ2UkID0gbmV3IFN1YmplY3QoKTtcbiAqXG4gKiAgICBjb25zdHJ1Y3RvcihcbiAqICAgICAgcHJpdmF0ZSBzdGF0ZTogUnhTdGF0ZTxDb21wb25lbnRTdGF0ZT5cbiAqICAgICkge1xuICogICAgICAvLyBSZWFjdGl2ZSBpbXBsZW1lbnRhdGlvblxuICogICAgICBzdGF0ZS5jb25uZWN0KFxuICogICAgICAgIHRoaXMuYXBpLmxvYWRpbmdDaGFuZ2UkLFxuICogICAgICAgIChzdGF0ZSwgXykgPT4ge1xuICogICAgICAgICAgICByZXR1cm4gdG9nZ2xlKHN0YXRlLCAnaXNMb2FkaW5nJyk7XG4gKiAgICAgICAgfVxuICogICAgICApO1xuICogICAgfVxuICpcbiAqICAgIC8vIEltcGVyYXRpdmUgaW1wbGVtZW50YXRpb25cbiAqICAgIHRvZ2dsZUxvYWRpbmcoKTogdm9pZCB7XG4gKiAgICAgIHRoaXMuc2V0KHRvZ2dsZShzdGF0ZSwgJ2lzTG9hZGluZycpKTtcbiAqICAgIH1cbiAqIH1cbiAqXG4gKiBAcmV0dXJucyBUXG4gKlxuICogQGRvY3NQYWdlIHRvZ2dsZVxuICogQGRvY3NDYXRlZ29yeSB0cmFuc2Zvcm1hdGlvbi1oZWxwZXJzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZTxUIGV4dGVuZHMgb2JqZWN0PihcbiAgb2JqZWN0OiBULFxuICBrZXk6IE9ubHlLZXlzT2ZTcGVjaWZpY1R5cGU8VCwgYm9vbGVhbj5cbik6IFQge1xuICBjb25zdCBvYmplY3RJc09iamVjdCA9IGlzT2JqZWN0R3VhcmQob2JqZWN0KTtcbiAgY29uc3Qga2V5SXNWYWxpZCA9IGlzS2V5T2Y8VD4oa2V5KTtcbiAgY29uc3QgaW5pdGlhbE9iamVjdCA9IG9iamVjdElzT2JqZWN0ID8gb2JqZWN0IDogKHt9IGFzIFQpO1xuXG4gIGlmICghb2JqZWN0SXNPYmplY3QpIHtcbiAgICBjb25zb2xlLndhcm4oYFRvZ2dsZTogb3JpZ2luYWwgdmFsdWUgKCR7b2JqZWN0fSkgaXMgbm90IGFuIG9iamVjdC5gKTtcbiAgfVxuXG4gIGlmICgha2V5SXNWYWxpZCkge1xuICAgIGNvbnNvbGUud2FybihgVG9nZ2xlOiBrZXkgYXJndW1lbnQgKCR7a2V5fSkgaXMgaW52YWxpZC5gKTtcbiAgfVxuXG4gIGlmIChrZXlJc1ZhbGlkICYmIHR5cGVvZiBpbml0aWFsT2JqZWN0W2tleV0gIT09ICdib29sZWFuJykge1xuICAgIGNvbnNvbGUud2FybihgVG9nZ2xlOiB2YWx1ZSBvZiB0aGUga2V5ICgke1N0cmluZyhrZXkpfSkgaXMgbm90IGEgYm9vbGVhbi5gKTtcbiAgfVxuXG4gIGlmICghaXNEZWZpbmVkKG9iamVjdCkgJiYgIWtleUlzVmFsaWQpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgaWYgKFxuICAgIGtleUlzVmFsaWQgJiZcbiAgICAodHlwZW9mIGluaXRpYWxPYmplY3Rba2V5XSA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAhaW5pdGlhbE9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKVxuICApIHtcbiAgICByZXR1cm4geyAuLi5pbml0aWFsT2JqZWN0LCBba2V5XTogIWluaXRpYWxPYmplY3Rba2V5XSB9O1xuICB9XG5cbiAgcmV0dXJuIHsgLi4uaW5pdGlhbE9iamVjdCB9O1xufVxuIl19