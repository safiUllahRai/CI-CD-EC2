import { isDefined } from '../_internals/guards';
/**
 * @description
 * Inserts one or multiple items to an array T[].
 * Returns a shallow copy of the updated array T[], and does not mutate the original one.
 *
 * @example
 * // Inserting single value
 *
 * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];
 *
 * const updatedCreatures = insert(creatures, {id: 3, type: 'parrot'});
 *
 * // updatedCreatures will be:
 * //  [{id: 1, type: 'cat'}, {id: 2, type: 'dog}, {id: 3, type: 'parrot}];
 *
 * @example
 * // Inserting multiple values
 *
 * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];
 *
 * const updatedCreatures = insert(creatures, [{id: 3, type: 'parrot'}, {id: 4, type: 'hamster'}]);
 *
 * // updatedCreatures will be:
 * // [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}, {id: 4, type: 'hamster'}];
 *
 * @example
 * // Usage with RxState
 *
 * export class ListComponent {
 *
 *    readonly insertCreature$ = new Subject<void>();
 *
 *    constructor(private state: RxState<ComponentState>) {
 *      // Reactive implementation
 *      state.connect(
 *        'creatures',
 *        this.insertCreature$,
 *        ({ creatures }) => {
 *            const creatureToAdd = {id: generateId(), name: 'newCreature', type: 'dinosaur' };
 *            return insert(creatures, creatureToAdd);
 *        }
 *      );
 *    }
 *
 *    // Imperative implementation
 *    insertCeature(): void {
 *        const creatureToAdd = {id: generateId(), name: 'newCreature', type: 'dinosaur' };
 *        this.state.set({ creatures: insert(this.state.get().creatures, creatureToAdd)});
 *    }
 * }
 *
 *
 * @returns T[]
 *
 * @docsPage insert
 * @docsCategory transformation-helpers
 */
export function insert(source, updates) {
    const updatesDefined = isDefined(updates);
    const sourceIsNotArray = !Array.isArray(source);
    const invalidInput = sourceIsNotArray && !updatesDefined;
    if (sourceIsNotArray && isDefined(source)) {
        console.warn(`Insert: Original value (${source}) is not an array.`);
    }
    if (invalidInput) {
        return source;
    }
    return (sourceIsNotArray ? [] : source).concat(updatesDefined ? (Array.isArray(updates) ? updates : [updates]) : []);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvdHJhbnNmb3JtYXRpb25zL3NyYy9saWIvYXJyYXkvaW5zZXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3REc7QUFDSCxNQUFNLFVBQVUsTUFBTSxDQUFJLE1BQVcsRUFBRSxPQUFnQjtJQUNyRCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsTUFBTSxZQUFZLEdBQUcsZ0JBQWdCLElBQUksQ0FBQyxjQUFjLENBQUM7SUFFekQsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUMxQyxPQUFPLENBQUMsSUFBSSxDQUFDLDJCQUEyQixNQUFNLG9CQUFvQixDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELElBQUksWUFBWSxFQUFFLENBQUM7UUFDakIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQzVDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNyRSxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGVmaW5lZCB9IGZyb20gJy4uL19pbnRlcm5hbHMvZ3VhcmRzJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEluc2VydHMgb25lIG9yIG11bHRpcGxlIGl0ZW1zIHRvIGFuIGFycmF5IFRbXS5cbiAqIFJldHVybnMgYSBzaGFsbG93IGNvcHkgb2YgdGhlIHVwZGF0ZWQgYXJyYXkgVFtdLCBhbmQgZG9lcyBub3QgbXV0YXRlIHRoZSBvcmlnaW5hbCBvbmUuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEluc2VydGluZyBzaW5nbGUgdmFsdWVcbiAqXG4gKiBjb25zdCBjcmVhdHVyZXMgPSBbe2lkOiAxLCB0eXBlOiAnY2F0J30sIHtpZDogMiwgdHlwZTogJ2RvZyd9XTtcbiAqXG4gKiBjb25zdCB1cGRhdGVkQ3JlYXR1cmVzID0gaW5zZXJ0KGNyZWF0dXJlcywge2lkOiAzLCB0eXBlOiAncGFycm90J30pO1xuICpcbiAqIC8vIHVwZGF0ZWRDcmVhdHVyZXMgd2lsbCBiZTpcbiAqIC8vICBbe2lkOiAxLCB0eXBlOiAnY2F0J30sIHtpZDogMiwgdHlwZTogJ2RvZ30sIHtpZDogMywgdHlwZTogJ3BhcnJvdH1dO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJbnNlcnRpbmcgbXVsdGlwbGUgdmFsdWVzXG4gKlxuICogY29uc3QgY3JlYXR1cmVzID0gW3tpZDogMSwgdHlwZTogJ2NhdCd9LCB7aWQ6IDIsIHR5cGU6ICdkb2cnfV07XG4gKlxuICogY29uc3QgdXBkYXRlZENyZWF0dXJlcyA9IGluc2VydChjcmVhdHVyZXMsIFt7aWQ6IDMsIHR5cGU6ICdwYXJyb3QnfSwge2lkOiA0LCB0eXBlOiAnaGFtc3Rlcid9XSk7XG4gKlxuICogLy8gdXBkYXRlZENyZWF0dXJlcyB3aWxsIGJlOlxuICogLy8gW3tpZDogMSwgdHlwZTogJ2NhdCd9LCB7aWQ6IDIsIHR5cGU6ICdkb2cnfSwge2lkOiAzLCB0eXBlOiAncGFycm90J30sIHtpZDogNCwgdHlwZTogJ2hhbXN0ZXInfV07XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFVzYWdlIHdpdGggUnhTdGF0ZVxuICpcbiAqIGV4cG9ydCBjbGFzcyBMaXN0Q29tcG9uZW50IHtcbiAqXG4gKiAgICByZWFkb25seSBpbnNlcnRDcmVhdHVyZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICpcbiAqICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RhdGU6IFJ4U3RhdGU8Q29tcG9uZW50U3RhdGU+KSB7XG4gKiAgICAgIC8vIFJlYWN0aXZlIGltcGxlbWVudGF0aW9uXG4gKiAgICAgIHN0YXRlLmNvbm5lY3QoXG4gKiAgICAgICAgJ2NyZWF0dXJlcycsXG4gKiAgICAgICAgdGhpcy5pbnNlcnRDcmVhdHVyZSQsXG4gKiAgICAgICAgKHsgY3JlYXR1cmVzIH0pID0+IHtcbiAqICAgICAgICAgICAgY29uc3QgY3JlYXR1cmVUb0FkZCA9IHtpZDogZ2VuZXJhdGVJZCgpLCBuYW1lOiAnbmV3Q3JlYXR1cmUnLCB0eXBlOiAnZGlub3NhdXInIH07XG4gKiAgICAgICAgICAgIHJldHVybiBpbnNlcnQoY3JlYXR1cmVzLCBjcmVhdHVyZVRvQWRkKTtcbiAqICAgICAgICB9XG4gKiAgICAgICk7XG4gKiAgICB9XG4gKlxuICogICAgLy8gSW1wZXJhdGl2ZSBpbXBsZW1lbnRhdGlvblxuICogICAgaW5zZXJ0Q2VhdHVyZSgpOiB2b2lkIHtcbiAqICAgICAgICBjb25zdCBjcmVhdHVyZVRvQWRkID0ge2lkOiBnZW5lcmF0ZUlkKCksIG5hbWU6ICduZXdDcmVhdHVyZScsIHR5cGU6ICdkaW5vc2F1cicgfTtcbiAqICAgICAgICB0aGlzLnN0YXRlLnNldCh7IGNyZWF0dXJlczogaW5zZXJ0KHRoaXMuc3RhdGUuZ2V0KCkuY3JlYXR1cmVzLCBjcmVhdHVyZVRvQWRkKX0pO1xuICogICAgfVxuICogfVxuICpcbiAqXG4gKiBAcmV0dXJucyBUW11cbiAqXG4gKiBAZG9jc1BhZ2UgaW5zZXJ0XG4gKiBAZG9jc0NhdGVnb3J5IHRyYW5zZm9ybWF0aW9uLWhlbHBlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydDxUPihzb3VyY2U6IFRbXSwgdXBkYXRlczogVCB8IFRbXSk6IFRbXSB7XG4gIGNvbnN0IHVwZGF0ZXNEZWZpbmVkID0gaXNEZWZpbmVkKHVwZGF0ZXMpO1xuICBjb25zdCBzb3VyY2VJc05vdEFycmF5ID0gIUFycmF5LmlzQXJyYXkoc291cmNlKTtcbiAgY29uc3QgaW52YWxpZElucHV0ID0gc291cmNlSXNOb3RBcnJheSAmJiAhdXBkYXRlc0RlZmluZWQ7XG5cbiAgaWYgKHNvdXJjZUlzTm90QXJyYXkgJiYgaXNEZWZpbmVkKHNvdXJjZSkpIHtcbiAgICBjb25zb2xlLndhcm4oYEluc2VydDogT3JpZ2luYWwgdmFsdWUgKCR7c291cmNlfSkgaXMgbm90IGFuIGFycmF5LmApO1xuICB9XG5cbiAgaWYgKGludmFsaWRJbnB1dCkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gKHNvdXJjZUlzTm90QXJyYXkgPyBbXSA6IHNvdXJjZSkuY29uY2F0KFxuICAgIHVwZGF0ZXNEZWZpbmVkID8gKEFycmF5LmlzQXJyYXkodXBkYXRlcykgPyB1cGRhdGVzIDogW3VwZGF0ZXNdKSA6IFtdXG4gICk7XG59XG4iXX0=