import { valuesComparer } from '../_internals/valuesComparer.util';
/**
 * @description
 * Updates one or multiple items in an array T[].
 * For comparison you can provide key, array of keys or a custom comparison function that should return true if items match.
 * If no comparison is provided, an equality check is used by default.
 * Returns a shallow copy of the array T[] and updated items, does not mutate the original array.
 *
 * @example
 * // Update with comparison function
 *
 * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];
 *
 * const newCat = {id: 1, type: 'lion'};
 *
 * const updatedCreatures = update(creatures, newCat, (a, b) => a.id === b.id);
 *
 * // updatedCreatures will be:
 * // [{id: 1, type: 'lion'}, {id: 2, type: 'dog'}];
 *
 * @example
 * // Update with key
 *
 * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}];
 *
 * const newCat = {id: 1, type: 'lion'};
 *
 * const updatedCreatures = update(creatures, newCat, 'id');
 *
 * // updatedCreatures will be:
 * // [{id: 1, type: 'lion'}, {id: 2, type: 'dog'}];
 *
 * @example
 * // Update with array of keys
 *
 * const creatures = [{id: 1, type: 'cat', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];
 *
 * const newCat = {id: 1, type: 'lion', name: 'Bella'};
 *
 * const updatedCreatures = update(creatures, newCat, ['id', 'name']);
 *
 * // updatedCreatures will be:
 * // [{id: 1, type: 'lion', name: 'Bella'}, {id: 2, type: 'dog', name: 'Sparky'}];
 *
 * @example
 * // Usage with RxState
 *
 * export class ListComponent {
 *
 *    readonly updateCreature$ = new Subject<Creature>();
 *
 *    constructor(private state: RxState<ComponentState>) {
 *      // Reactive implementation
 *      state.connect(
 *        'creatures',
 *        this.updateCreature$,
 *        ({ creatures }, creatureToUpdate) => {
 *            return update(creatures, creatureToUpdate, (a, b) => a.id === b.id);
 *        }
 *      );
 *    }
 *
 *    // Imperative implementation
 *    updateCreature(creatureToUpdate: Creature): void {
 *        this.state.set({ creatures: update(this.state.get().creatures, creatureToUpdate, (a, b) => a.id === b.id)});
 *    }
 * }
 *
 * @returns T[]
 *
 * @docsPage update
 * @docsCategory transformation-helpers
 */
export function update(source, updates, compare) {
    const updatesDefined = updates != null;
    const updatesAsArray = updatesDefined
        ? Array.isArray(updates)
            ? updates
            : [updates]
        : [];
    const sourceDefined = source != null;
    const sourceIsNotArray = !Array.isArray(source);
    const invalidInput = sourceIsNotArray || source.length === 0 || updatesAsArray.length === 0;
    if (sourceDefined && sourceIsNotArray) {
        console.warn(`Update: Original value (${source}) is not an array.`);
    }
    if (invalidInput) {
        return source;
    }
    const x = [];
    for (const existingItem of source) {
        const match = customFind(updatesAsArray, (item) => valuesComparer(item, existingItem, compare));
        x.push(match ? { ...existingItem, ...match } : existingItem);
    }
    return x;
}
function customFind(array, fn) {
    for (const item of array) {
        const x = fn(item);
        if (x) {
            return item;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvdHJhbnNmb3JtYXRpb25zL3NyYy9saWIvYXJyYXkvdXBkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUduRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1RUc7QUFDSCxNQUFNLFVBQVUsTUFBTSxDQUNwQixNQUFXLEVBQ1gsT0FBa0MsRUFDbEMsT0FBMkI7SUFFM0IsTUFBTSxjQUFjLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQztJQUN2QyxNQUFNLGNBQWMsR0FBRyxjQUFjO1FBQ25DLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUN0QixDQUFDLENBQUMsT0FBTztZQUNULENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNiLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFUCxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDO0lBQ3JDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELE1BQU0sWUFBWSxHQUNoQixnQkFBZ0IsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxjQUFjLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUV6RSxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLE1BQU0sb0JBQW9CLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNqQixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQVEsRUFBRSxDQUFDO0lBQ2xCLEtBQUssTUFBTSxZQUFZLElBQUksTUFBTSxFQUFFLENBQUM7UUFDbEMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQ2hELGNBQWMsQ0FBQyxJQUFTLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUNqRCxDQUFDO1FBRUYsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFJLEtBQVUsRUFBRSxFQUF3QjtJQUN6RCxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ04sT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2YWx1ZXNDb21wYXJlciB9IGZyb20gJy4uL19pbnRlcm5hbHMvdmFsdWVzQ29tcGFyZXIudXRpbCc7XG5pbXBvcnQgeyBDb21wYXJhYmxlRGF0YSB9IGZyb20gJy4uL2ludGVyZmFjZXMvY29tcGFyYWJsZS1kYXRhLXR5cGUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogVXBkYXRlcyBvbmUgb3IgbXVsdGlwbGUgaXRlbXMgaW4gYW4gYXJyYXkgVFtdLlxuICogRm9yIGNvbXBhcmlzb24geW91IGNhbiBwcm92aWRlIGtleSwgYXJyYXkgb2Yga2V5cyBvciBhIGN1c3RvbSBjb21wYXJpc29uIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIHJldHVybiB0cnVlIGlmIGl0ZW1zIG1hdGNoLlxuICogSWYgbm8gY29tcGFyaXNvbiBpcyBwcm92aWRlZCwgYW4gZXF1YWxpdHkgY2hlY2sgaXMgdXNlZCBieSBkZWZhdWx0LlxuICogUmV0dXJucyBhIHNoYWxsb3cgY29weSBvZiB0aGUgYXJyYXkgVFtdIGFuZCB1cGRhdGVkIGl0ZW1zLCBkb2VzIG5vdCBtdXRhdGUgdGhlIG9yaWdpbmFsIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVcGRhdGUgd2l0aCBjb21wYXJpc29uIGZ1bmN0aW9uXG4gKlxuICogY29uc3QgY3JlYXR1cmVzID0gW3tpZDogMSwgdHlwZTogJ2NhdCd9LCB7aWQ6IDIsIHR5cGU6ICdkb2cnfV07XG4gKlxuICogY29uc3QgbmV3Q2F0ID0ge2lkOiAxLCB0eXBlOiAnbGlvbid9O1xuICpcbiAqIGNvbnN0IHVwZGF0ZWRDcmVhdHVyZXMgPSB1cGRhdGUoY3JlYXR1cmVzLCBuZXdDYXQsIChhLCBiKSA9PiBhLmlkID09PSBiLmlkKTtcbiAqXG4gKiAvLyB1cGRhdGVkQ3JlYXR1cmVzIHdpbGwgYmU6XG4gKiAvLyBbe2lkOiAxLCB0eXBlOiAnbGlvbid9LCB7aWQ6IDIsIHR5cGU6ICdkb2cnfV07XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFVwZGF0ZSB3aXRoIGtleVxuICpcbiAqIGNvbnN0IGNyZWF0dXJlcyA9IFt7aWQ6IDEsIHR5cGU6ICdjYXQnfSwge2lkOiAyLCB0eXBlOiAnZG9nJ31dO1xuICpcbiAqIGNvbnN0IG5ld0NhdCA9IHtpZDogMSwgdHlwZTogJ2xpb24nfTtcbiAqXG4gKiBjb25zdCB1cGRhdGVkQ3JlYXR1cmVzID0gdXBkYXRlKGNyZWF0dXJlcywgbmV3Q2F0LCAnaWQnKTtcbiAqXG4gKiAvLyB1cGRhdGVkQ3JlYXR1cmVzIHdpbGwgYmU6XG4gKiAvLyBbe2lkOiAxLCB0eXBlOiAnbGlvbid9LCB7aWQ6IDIsIHR5cGU6ICdkb2cnfV07XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFVwZGF0ZSB3aXRoIGFycmF5IG9mIGtleXNcbiAqXG4gKiBjb25zdCBjcmVhdHVyZXMgPSBbe2lkOiAxLCB0eXBlOiAnY2F0JywgbmFtZTogJ0JlbGxhJ30sIHtpZDogMiwgdHlwZTogJ2RvZycsIG5hbWU6ICdTcGFya3knfV07XG4gKlxuICogY29uc3QgbmV3Q2F0ID0ge2lkOiAxLCB0eXBlOiAnbGlvbicsIG5hbWU6ICdCZWxsYSd9O1xuICpcbiAqIGNvbnN0IHVwZGF0ZWRDcmVhdHVyZXMgPSB1cGRhdGUoY3JlYXR1cmVzLCBuZXdDYXQsIFsnaWQnLCAnbmFtZSddKTtcbiAqXG4gKiAvLyB1cGRhdGVkQ3JlYXR1cmVzIHdpbGwgYmU6XG4gKiAvLyBbe2lkOiAxLCB0eXBlOiAnbGlvbicsIG5hbWU6ICdCZWxsYSd9LCB7aWQ6IDIsIHR5cGU6ICdkb2cnLCBuYW1lOiAnU3Bhcmt5J31dO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2FnZSB3aXRoIFJ4U3RhdGVcbiAqXG4gKiBleHBvcnQgY2xhc3MgTGlzdENvbXBvbmVudCB7XG4gKlxuICogICAgcmVhZG9ubHkgdXBkYXRlQ3JlYXR1cmUkID0gbmV3IFN1YmplY3Q8Q3JlYXR1cmU+KCk7XG4gKlxuICogICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdGF0ZTogUnhTdGF0ZTxDb21wb25lbnRTdGF0ZT4pIHtcbiAqICAgICAgLy8gUmVhY3RpdmUgaW1wbGVtZW50YXRpb25cbiAqICAgICAgc3RhdGUuY29ubmVjdChcbiAqICAgICAgICAnY3JlYXR1cmVzJyxcbiAqICAgICAgICB0aGlzLnVwZGF0ZUNyZWF0dXJlJCxcbiAqICAgICAgICAoeyBjcmVhdHVyZXMgfSwgY3JlYXR1cmVUb1VwZGF0ZSkgPT4ge1xuICogICAgICAgICAgICByZXR1cm4gdXBkYXRlKGNyZWF0dXJlcywgY3JlYXR1cmVUb1VwZGF0ZSwgKGEsIGIpID0+IGEuaWQgPT09IGIuaWQpO1xuICogICAgICAgIH1cbiAqICAgICAgKTtcbiAqICAgIH1cbiAqXG4gKiAgICAvLyBJbXBlcmF0aXZlIGltcGxlbWVudGF0aW9uXG4gKiAgICB1cGRhdGVDcmVhdHVyZShjcmVhdHVyZVRvVXBkYXRlOiBDcmVhdHVyZSk6IHZvaWQge1xuICogICAgICAgIHRoaXMuc3RhdGUuc2V0KHsgY3JlYXR1cmVzOiB1cGRhdGUodGhpcy5zdGF0ZS5nZXQoKS5jcmVhdHVyZXMsIGNyZWF0dXJlVG9VcGRhdGUsIChhLCBiKSA9PiBhLmlkID09PSBiLmlkKX0pO1xuICogICAgfVxuICogfVxuICpcbiAqIEByZXR1cm5zIFRbXVxuICpcbiAqIEBkb2NzUGFnZSB1cGRhdGVcbiAqIEBkb2NzQ2F0ZWdvcnkgdHJhbnNmb3JtYXRpb24taGVscGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlPFQgZXh0ZW5kcyBvYmplY3Q+KFxuICBzb3VyY2U6IFRbXSxcbiAgdXBkYXRlczogUGFydGlhbDxUPltdIHwgUGFydGlhbDxUPixcbiAgY29tcGFyZT86IENvbXBhcmFibGVEYXRhPFQ+XG4pOiBUW10ge1xuICBjb25zdCB1cGRhdGVzRGVmaW5lZCA9IHVwZGF0ZXMgIT0gbnVsbDtcbiAgY29uc3QgdXBkYXRlc0FzQXJyYXkgPSB1cGRhdGVzRGVmaW5lZFxuICAgID8gQXJyYXkuaXNBcnJheSh1cGRhdGVzKVxuICAgICAgPyB1cGRhdGVzXG4gICAgICA6IFt1cGRhdGVzXVxuICAgIDogW107XG5cbiAgY29uc3Qgc291cmNlRGVmaW5lZCA9IHNvdXJjZSAhPSBudWxsO1xuICBjb25zdCBzb3VyY2VJc05vdEFycmF5ID0gIUFycmF5LmlzQXJyYXkoc291cmNlKTtcbiAgY29uc3QgaW52YWxpZElucHV0ID1cbiAgICBzb3VyY2VJc05vdEFycmF5IHx8IHNvdXJjZS5sZW5ndGggPT09IDAgfHwgdXBkYXRlc0FzQXJyYXkubGVuZ3RoID09PSAwO1xuXG4gIGlmIChzb3VyY2VEZWZpbmVkICYmIHNvdXJjZUlzTm90QXJyYXkpIHtcbiAgICBjb25zb2xlLndhcm4oYFVwZGF0ZTogT3JpZ2luYWwgdmFsdWUgKCR7c291cmNlfSkgaXMgbm90IGFuIGFycmF5LmApO1xuICB9XG5cbiAgaWYgKGludmFsaWRJbnB1dCkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBjb25zdCB4OiBUW10gPSBbXTtcbiAgZm9yIChjb25zdCBleGlzdGluZ0l0ZW0gb2Ygc291cmNlKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBjdXN0b21GaW5kKHVwZGF0ZXNBc0FycmF5LCAoaXRlbSkgPT5cbiAgICAgIHZhbHVlc0NvbXBhcmVyKGl0ZW0gYXMgVCwgZXhpc3RpbmdJdGVtLCBjb21wYXJlKVxuICAgICk7XG5cbiAgICB4LnB1c2gobWF0Y2ggPyB7IC4uLmV4aXN0aW5nSXRlbSwgLi4ubWF0Y2ggfSA6IGV4aXN0aW5nSXRlbSk7XG4gIH1cblxuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gY3VzdG9tRmluZDxUPihhcnJheTogVFtdLCBmbjogKGl0ZW06IFQpID0+IGJvb2xlYW4pOiBUIHwgdW5kZWZpbmVkIHtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGFycmF5KSB7XG4gICAgY29uc3QgeCA9IGZuKGl0ZW0pO1xuICAgIGlmICh4KSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==