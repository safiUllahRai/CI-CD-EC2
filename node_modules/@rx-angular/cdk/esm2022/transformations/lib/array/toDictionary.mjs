import { isDefined, isKeyOf } from '../_internals/guards';
/**
 * @description
 * Converts an array of objects to a dictionary {[key: string]: T}.
 * Accepts array T[] and key of type string, number or symbol as inputs.
 *
 *
 * @example
 *
 * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'parrot'}];
 *
 * const creaturesDictionary = toDictionary(creatures, 'id');
 *
 * // creaturesDictionary will be:
 * // {
 * //  1: {id: 1, type: 'cat'},
 * //  2: {id: 2, type: 'dog'},
 * //  3: {id: 3, type: 'parrot'}
 * // };
 * @example
 * // Usage with RxState
 *
 * export class ListComponent {
 *
 *    readonly convertToDictionary$ = new Subject();
 *
 *    constructor(private state: RxState<ComponentState>) {
 *      // Reactive implementation
 *      state.connect(
 *        'creaturesDictionary',
 *        this.convertToDictionary$,
 *        ({ creatures }) => {
 *            return toDictionary(creatures, 'id');
 *        }
 *      );
 *    }
 *
 *    // Imperative implementation
 *    convertToDictionary(): void {
 *        this.state.set({ creaturesDictionary: toDictionary(this.state.get().creatures, 'id'});
 *    }
 * }
 *
 * @see {@link OnlyKeysOfSpecificType}
 * @param {OnlyKeysOfSpecificType<T, S>} key
 * @returns { [key: string]: T[] }
 * @docsPage toDictionary
 * @docsCategory transformation-helpers
 */
export function toDictionary(source, key) {
    if (!isDefined(source)) {
        return source;
    }
    const sourceEmpty = !source.length;
    if (!Array.isArray(source) || sourceEmpty || !isKeyOf(source[0][key])) {
        if (!sourceEmpty) {
            console.warn('ToDictionary: unexpected input params.');
        }
        return {};
    }
    const dictionary = {};
    const length = source.length;
    let i = 0;
    for (i; i < length; i++) {
        dictionary[`${source[i][key]}`] = Object.assign({}, source[i]);
    }
    return dictionary;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9EaWN0aW9uYXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvdHJhbnNmb3JtYXRpb25zL3NyYy9saWIvYXJyYXkvdG9EaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUEwQixNQUFNLHNCQUFzQixDQUFDO0FBRWxGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQStDRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQzFCLE1BQVcsRUFDWCxHQUdxQztJQUVyQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDdkIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUVuQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLElBQUksQ0FBQyxPQUFPLENBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN6RSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBeUIsRUFBRSxDQUFDO0lBQzVDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRVYsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3hCLFVBQVUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0RlZmluZWQsIGlzS2V5T2YsIE9ubHlLZXlzT2ZTcGVjaWZpY1R5cGUgfSBmcm9tICcuLi9faW50ZXJuYWxzL2d1YXJkcyc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBvZiBvYmplY3RzIHRvIGEgZGljdGlvbmFyeSB7W2tleTogc3RyaW5nXTogVH0uXG4gKiBBY2NlcHRzIGFycmF5IFRbXSBhbmQga2V5IG9mIHR5cGUgc3RyaW5nLCBudW1iZXIgb3Igc3ltYm9sIGFzIGlucHV0cy5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBjb25zdCBjcmVhdHVyZXMgPSBbe2lkOiAxLCB0eXBlOiAnY2F0J30sIHtpZDogMiwgdHlwZTogJ2RvZyd9LCB7aWQ6IDMsIHR5cGU6ICdwYXJyb3QnfV07XG4gKlxuICogY29uc3QgY3JlYXR1cmVzRGljdGlvbmFyeSA9IHRvRGljdGlvbmFyeShjcmVhdHVyZXMsICdpZCcpO1xuICpcbiAqIC8vIGNyZWF0dXJlc0RpY3Rpb25hcnkgd2lsbCBiZTpcbiAqIC8vIHtcbiAqIC8vICAxOiB7aWQ6IDEsIHR5cGU6ICdjYXQnfSxcbiAqIC8vICAyOiB7aWQ6IDIsIHR5cGU6ICdkb2cnfSxcbiAqIC8vICAzOiB7aWQ6IDMsIHR5cGU6ICdwYXJyb3QnfVxuICogLy8gfTtcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2FnZSB3aXRoIFJ4U3RhdGVcbiAqXG4gKiBleHBvcnQgY2xhc3MgTGlzdENvbXBvbmVudCB7XG4gKlxuICogICAgcmVhZG9ubHkgY29udmVydFRvRGljdGlvbmFyeSQgPSBuZXcgU3ViamVjdCgpO1xuICpcbiAqICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RhdGU6IFJ4U3RhdGU8Q29tcG9uZW50U3RhdGU+KSB7XG4gKiAgICAgIC8vIFJlYWN0aXZlIGltcGxlbWVudGF0aW9uXG4gKiAgICAgIHN0YXRlLmNvbm5lY3QoXG4gKiAgICAgICAgJ2NyZWF0dXJlc0RpY3Rpb25hcnknLFxuICogICAgICAgIHRoaXMuY29udmVydFRvRGljdGlvbmFyeSQsXG4gKiAgICAgICAgKHsgY3JlYXR1cmVzIH0pID0+IHtcbiAqICAgICAgICAgICAgcmV0dXJuIHRvRGljdGlvbmFyeShjcmVhdHVyZXMsICdpZCcpO1xuICogICAgICAgIH1cbiAqICAgICAgKTtcbiAqICAgIH1cbiAqXG4gKiAgICAvLyBJbXBlcmF0aXZlIGltcGxlbWVudGF0aW9uXG4gKiAgICBjb252ZXJ0VG9EaWN0aW9uYXJ5KCk6IHZvaWQge1xuICogICAgICAgIHRoaXMuc3RhdGUuc2V0KHsgY3JlYXR1cmVzRGljdGlvbmFyeTogdG9EaWN0aW9uYXJ5KHRoaXMuc3RhdGUuZ2V0KCkuY3JlYXR1cmVzLCAnaWQnfSk7XG4gKiAgICB9XG4gKiB9XG4gKlxuICogQHNlZSB7QGxpbmsgT25seUtleXNPZlNwZWNpZmljVHlwZX1cbiAqIEBwYXJhbSB7T25seUtleXNPZlNwZWNpZmljVHlwZTxULCBTPn0ga2V5XG4gKiBAcmV0dXJucyB7IFtrZXk6IHN0cmluZ106IFRbXSB9XG4gKiBAZG9jc1BhZ2UgdG9EaWN0aW9uYXJ5XG4gKiBAZG9jc0NhdGVnb3J5IHRyYW5zZm9ybWF0aW9uLWhlbHBlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRGljdGlvbmFyeTxUIGV4dGVuZHMgb2JqZWN0PihcbiAgc291cmNlOiBUW10sXG4gIGtleTpcbiAgICB8IE9ubHlLZXlzT2ZTcGVjaWZpY1R5cGU8VCwgbnVtYmVyPlxuICAgIHwgT25seUtleXNPZlNwZWNpZmljVHlwZTxULCBzdHJpbmc+XG4gICAgfCBPbmx5S2V5c09mU3BlY2lmaWNUeXBlPFQsIHN5bWJvbD5cbik6IHsgW2tleTogc3RyaW5nXTogVCB9IHtcbiAgaWYgKCFpc0RlZmluZWQoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBjb25zdCBzb3VyY2VFbXB0eSA9ICFzb3VyY2UubGVuZ3RoO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShzb3VyY2UpIHx8IHNvdXJjZUVtcHR5IHx8ICFpc0tleU9mPFQ+KHNvdXJjZVswXVtrZXldKSkge1xuICAgIGlmICghc291cmNlRW1wdHkpIHtcbiAgICAgIGNvbnNvbGUud2FybignVG9EaWN0aW9uYXJ5OiB1bmV4cGVjdGVkIGlucHV0IHBhcmFtcy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgZGljdGlvbmFyeTogeyBba2V5OiBzdHJpbmddOiBUIH0gPSB7fTtcbiAgY29uc3QgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuXG4gIGZvciAoaTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgZGljdGlvbmFyeVtgJHtzb3VyY2VbaV1ba2V5XX1gXSA9IE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZVtpXSk7XG4gIH1cblxuICByZXR1cm4gZGljdGlvbmFyeTtcbn1cbiJdfQ==