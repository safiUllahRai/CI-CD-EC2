import { isDefined } from '../_internals/guards';
import { valuesComparer } from '../_internals/valuesComparer.util';
/**
 * @description
 * Removes one or multiple items from an array T[].
 * For comparison you can provide a key, an array of keys or a custom comparison function that should return true if items match.
 * If no comparison data is provided, an equality check is used by default.
 * Returns a shallow copy of the updated array T[], and does not mutate the original one.
 *
 * @example
 * // Removing value without comparison data
 *
 * const items = [1,2,3,4,5];
 *
 * const updatedItems = remove(items, [1,2,3]);
 *
 * // updatedItems will be: [4,5];
 *
 * @example
 * // Removing values with comparison function
 *
 * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];
 *
 * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];
 *
 * const realCreatures = remove(creatures, nonExistingCreatures, (a, b) => a.id === b.id);
 *
 * // realCreatures will be: [{id: 1, type: 'cat'}];
 *
 * @example
 * // Removing values with key
 *
 * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];
 *
 * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];
 *
 * const realCreatures = remove(creatures, nonExistingCreatures, 'id');
 *
 * // realCreatures will be: [{id: 1, type: 'cat'}];
 *
 * @example
 * // Removing values with array of keys
 *
 * const creatures = [{id: 1, type: 'cat'}, {id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];
 *
 * const nonExistingCreatures = [{id: 2, type: 'unicorn'}, {id: 3, type: 'kobold'}];
 *
 * const realCreatures = remove(creatures, nonExistingCreatures, ['id', 'type']);
 *
 * // realCreatures will be: [{id: 1, type: 'cat'}];
 *
 * @example
 * // Usage with RxState
 *
 * export class ListComponent {
 *
 *    readonly removeCreature$ = new Subject<Creature>();
 *
 *    constructor(private state: RxState<ComponentState>) {
 *      // Reactive implementation
 *      state.connect(
 *        'creatures',
 *        this.removeCreature$,
 *        ({ creatures }, creatureToRemove) => {
 *            return remove(creatures, creatureToRemove, (a, b) => a.id === b.id);
 *        }
 *      );
 *    }
 *
 *    // Imperative implementation
 *    removeCreature(creatureToRemove: Creature): void {
 *        this.state.set({ creatures: remove(this.state.get().creatures, creatureToRemove, (a, b) => a.id === b.id)});
 *    }
 * }
 *
 * @returns T[]
 *
 * @docsPage remove
 * @docsCategory transformation-helpers
 */
export function remove(source, scrap, compare) {
    const scrapAsArray = isDefined(scrap)
        ? Array.isArray(scrap)
            ? scrap
            : [scrap]
        : [];
    const invalidInput = !Array.isArray(source);
    if (invalidInput) {
        console.warn(`Remove: original value (${source}) is not an array`);
        return source;
    }
    return source.filter((existingItem) => {
        return !scrapAsArray.some((item) => valuesComparer(item, existingItem, compare));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvdHJhbnNmb3JtYXRpb25zL3NyYy9saWIvYXJyYXkvcmVtb3ZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFHbkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNkVHO0FBQ0gsTUFBTSxVQUFVLE1BQU0sQ0FDcEIsTUFBVyxFQUNYLEtBQWdDLEVBQ2hDLE9BQTJCO0lBRTNCLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDbkMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxLQUFLO1lBQ1AsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNQLE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1QyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLE1BQU0sbUJBQW1CLENBQUMsQ0FBQztRQUNuRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7UUFDcEMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNqQyxjQUFjLENBQUMsSUFBUyxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FDakQsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGVmaW5lZCB9IGZyb20gJy4uL19pbnRlcm5hbHMvZ3VhcmRzJztcbmltcG9ydCB7IHZhbHVlc0NvbXBhcmVyIH0gZnJvbSAnLi4vX2ludGVybmFscy92YWx1ZXNDb21wYXJlci51dGlsJztcbmltcG9ydCB7IENvbXBhcmFibGVEYXRhIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb21wYXJhYmxlLWRhdGEtdHlwZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZW1vdmVzIG9uZSBvciBtdWx0aXBsZSBpdGVtcyBmcm9tIGFuIGFycmF5IFRbXS5cbiAqIEZvciBjb21wYXJpc29uIHlvdSBjYW4gcHJvdmlkZSBhIGtleSwgYW4gYXJyYXkgb2Yga2V5cyBvciBhIGN1c3RvbSBjb21wYXJpc29uIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIHJldHVybiB0cnVlIGlmIGl0ZW1zIG1hdGNoLlxuICogSWYgbm8gY29tcGFyaXNvbiBkYXRhIGlzIHByb3ZpZGVkLCBhbiBlcXVhbGl0eSBjaGVjayBpcyB1c2VkIGJ5IGRlZmF1bHQuXG4gKiBSZXR1cm5zIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSB1cGRhdGVkIGFycmF5IFRbXSwgYW5kIGRvZXMgbm90IG11dGF0ZSB0aGUgb3JpZ2luYWwgb25lLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZW1vdmluZyB2YWx1ZSB3aXRob3V0IGNvbXBhcmlzb24gZGF0YVxuICpcbiAqIGNvbnN0IGl0ZW1zID0gWzEsMiwzLDQsNV07XG4gKlxuICogY29uc3QgdXBkYXRlZEl0ZW1zID0gcmVtb3ZlKGl0ZW1zLCBbMSwyLDNdKTtcbiAqXG4gKiAvLyB1cGRhdGVkSXRlbXMgd2lsbCBiZTogWzQsNV07XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlbW92aW5nIHZhbHVlcyB3aXRoIGNvbXBhcmlzb24gZnVuY3Rpb25cbiAqXG4gKiBjb25zdCBjcmVhdHVyZXMgPSBbe2lkOiAxLCB0eXBlOiAnY2F0J30sIHtpZDogMiwgdHlwZTogJ3VuaWNvcm4nfSwge2lkOiAzLCB0eXBlOiAna29ib2xkJ31dO1xuICpcbiAqIGNvbnN0IG5vbkV4aXN0aW5nQ3JlYXR1cmVzID0gW3tpZDogMiwgdHlwZTogJ3VuaWNvcm4nfSwge2lkOiAzLCB0eXBlOiAna29ib2xkJ31dO1xuICpcbiAqIGNvbnN0IHJlYWxDcmVhdHVyZXMgPSByZW1vdmUoY3JlYXR1cmVzLCBub25FeGlzdGluZ0NyZWF0dXJlcywgKGEsIGIpID0+IGEuaWQgPT09IGIuaWQpO1xuICpcbiAqIC8vIHJlYWxDcmVhdHVyZXMgd2lsbCBiZTogW3tpZDogMSwgdHlwZTogJ2NhdCd9XTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVtb3ZpbmcgdmFsdWVzIHdpdGgga2V5XG4gKlxuICogY29uc3QgY3JlYXR1cmVzID0gW3tpZDogMSwgdHlwZTogJ2NhdCd9LCB7aWQ6IDIsIHR5cGU6ICd1bmljb3JuJ30sIHtpZDogMywgdHlwZTogJ2tvYm9sZCd9XTtcbiAqXG4gKiBjb25zdCBub25FeGlzdGluZ0NyZWF0dXJlcyA9IFt7aWQ6IDIsIHR5cGU6ICd1bmljb3JuJ30sIHtpZDogMywgdHlwZTogJ2tvYm9sZCd9XTtcbiAqXG4gKiBjb25zdCByZWFsQ3JlYXR1cmVzID0gcmVtb3ZlKGNyZWF0dXJlcywgbm9uRXhpc3RpbmdDcmVhdHVyZXMsICdpZCcpO1xuICpcbiAqIC8vIHJlYWxDcmVhdHVyZXMgd2lsbCBiZTogW3tpZDogMSwgdHlwZTogJ2NhdCd9XTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVtb3ZpbmcgdmFsdWVzIHdpdGggYXJyYXkgb2Yga2V5c1xuICpcbiAqIGNvbnN0IGNyZWF0dXJlcyA9IFt7aWQ6IDEsIHR5cGU6ICdjYXQnfSwge2lkOiAyLCB0eXBlOiAndW5pY29ybid9LCB7aWQ6IDMsIHR5cGU6ICdrb2JvbGQnfV07XG4gKlxuICogY29uc3Qgbm9uRXhpc3RpbmdDcmVhdHVyZXMgPSBbe2lkOiAyLCB0eXBlOiAndW5pY29ybid9LCB7aWQ6IDMsIHR5cGU6ICdrb2JvbGQnfV07XG4gKlxuICogY29uc3QgcmVhbENyZWF0dXJlcyA9IHJlbW92ZShjcmVhdHVyZXMsIG5vbkV4aXN0aW5nQ3JlYXR1cmVzLCBbJ2lkJywgJ3R5cGUnXSk7XG4gKlxuICogLy8gcmVhbENyZWF0dXJlcyB3aWxsIGJlOiBbe2lkOiAxLCB0eXBlOiAnY2F0J31dO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2FnZSB3aXRoIFJ4U3RhdGVcbiAqXG4gKiBleHBvcnQgY2xhc3MgTGlzdENvbXBvbmVudCB7XG4gKlxuICogICAgcmVhZG9ubHkgcmVtb3ZlQ3JlYXR1cmUkID0gbmV3IFN1YmplY3Q8Q3JlYXR1cmU+KCk7XG4gKlxuICogICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdGF0ZTogUnhTdGF0ZTxDb21wb25lbnRTdGF0ZT4pIHtcbiAqICAgICAgLy8gUmVhY3RpdmUgaW1wbGVtZW50YXRpb25cbiAqICAgICAgc3RhdGUuY29ubmVjdChcbiAqICAgICAgICAnY3JlYXR1cmVzJyxcbiAqICAgICAgICB0aGlzLnJlbW92ZUNyZWF0dXJlJCxcbiAqICAgICAgICAoeyBjcmVhdHVyZXMgfSwgY3JlYXR1cmVUb1JlbW92ZSkgPT4ge1xuICogICAgICAgICAgICByZXR1cm4gcmVtb3ZlKGNyZWF0dXJlcywgY3JlYXR1cmVUb1JlbW92ZSwgKGEsIGIpID0+IGEuaWQgPT09IGIuaWQpO1xuICogICAgICAgIH1cbiAqICAgICAgKTtcbiAqICAgIH1cbiAqXG4gKiAgICAvLyBJbXBlcmF0aXZlIGltcGxlbWVudGF0aW9uXG4gKiAgICByZW1vdmVDcmVhdHVyZShjcmVhdHVyZVRvUmVtb3ZlOiBDcmVhdHVyZSk6IHZvaWQge1xuICogICAgICAgIHRoaXMuc3RhdGUuc2V0KHsgY3JlYXR1cmVzOiByZW1vdmUodGhpcy5zdGF0ZS5nZXQoKS5jcmVhdHVyZXMsIGNyZWF0dXJlVG9SZW1vdmUsIChhLCBiKSA9PiBhLmlkID09PSBiLmlkKX0pO1xuICogICAgfVxuICogfVxuICpcbiAqIEByZXR1cm5zIFRbXVxuICpcbiAqIEBkb2NzUGFnZSByZW1vdmVcbiAqIEBkb2NzQ2F0ZWdvcnkgdHJhbnNmb3JtYXRpb24taGVscGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQ+KFxuICBzb3VyY2U6IFRbXSxcbiAgc2NyYXA6IFBhcnRpYWw8VD5bXSB8IFBhcnRpYWw8VD4sXG4gIGNvbXBhcmU/OiBDb21wYXJhYmxlRGF0YTxUPlxuKTogVFtdIHtcbiAgY29uc3Qgc2NyYXBBc0FycmF5ID0gaXNEZWZpbmVkKHNjcmFwKVxuICAgID8gQXJyYXkuaXNBcnJheShzY3JhcClcbiAgICAgID8gc2NyYXBcbiAgICAgIDogW3NjcmFwXVxuICAgIDogW107XG4gIGNvbnN0IGludmFsaWRJbnB1dCA9ICFBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cbiAgaWYgKGludmFsaWRJbnB1dCkge1xuICAgIGNvbnNvbGUud2FybihgUmVtb3ZlOiBvcmlnaW5hbCB2YWx1ZSAoJHtzb3VyY2V9KSBpcyBub3QgYW4gYXJyYXlgKTtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZS5maWx0ZXIoKGV4aXN0aW5nSXRlbSkgPT4ge1xuICAgIHJldHVybiAhc2NyYXBBc0FycmF5LnNvbWUoKGl0ZW0pID0+XG4gICAgICB2YWx1ZXNDb21wYXJlcihpdGVtIGFzIFQsIGV4aXN0aW5nSXRlbSwgY29tcGFyZSlcbiAgICApO1xuICB9KTtcbn1cbiJdfQ==