import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
const computeFirst = ({ count, index }) => index === 0;
const computeLast = ({ count, index }) => index === count - 1;
const computeEven = ({ count, index }) => index % 2 === 0;
export class RxDefaultListViewContext {
    _item = new ReplaySubject(1);
    item$ = this._item.asObservable();
    _$implicit;
    _$complete;
    _$error;
    _$suspense;
    _context$ = new BehaviorSubject({
        index: -1,
        count: -1,
    });
    set $implicit($implicit) {
        this._$implicit = $implicit;
        this._item.next($implicit);
    }
    get $implicit() {
        return this._$implicit;
    }
    get $complete() {
        return this._$complete;
    }
    get $error() {
        return this._$error;
    }
    get $suspense() {
        return this._$suspense;
    }
    get index() {
        return this._context$.getValue().index;
    }
    get count() {
        return this._context$.getValue().count;
    }
    get first() {
        return computeFirst(this._context$.getValue());
    }
    get last() {
        return computeLast(this._context$.getValue());
    }
    get even() {
        return computeEven(this._context$.getValue());
    }
    get odd() {
        return !this.even;
    }
    get index$() {
        return this._context$.pipe(map((c) => c.index), distinctUntilChanged());
    }
    get count$() {
        return this._context$.pipe(map((s) => s.count), distinctUntilChanged());
    }
    get first$() {
        return this._context$.pipe(map(computeFirst), distinctUntilChanged());
    }
    get last$() {
        return this._context$.pipe(map(computeLast), distinctUntilChanged());
    }
    get even$() {
        return this._context$.pipe(map(computeEven), distinctUntilChanged());
    }
    get odd$() {
        return this.even$.pipe(map((even) => !even));
    }
    constructor(item, customProps) {
        this.$implicit = item;
        if (customProps) {
            this.updateContext(customProps);
        }
    }
    updateContext(newProps) {
        this._context$.next({
            ...this._context$.getValue(),
            ...newProps,
        });
    }
    select = (props) => {
        return this.item$.pipe(map((r) => props.reduce((acc, key) => acc?.[key], r)));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC12aWV3LWNvbnRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2Nkay90ZW1wbGF0ZS9zcmMvbGliL2xpc3Qtdmlldy1jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQWMzRCxNQUFNLFlBQVksR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQzlELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTFELE1BQU0sT0FBTyx3QkFBd0I7SUFNMUIsS0FBSyxHQUFHLElBQUksYUFBYSxDQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFCLFVBQVUsQ0FBSTtJQUNkLFVBQVUsQ0FBVTtJQUNwQixPQUFPLENBQWdCO0lBQ3ZCLFVBQVUsQ0FBTTtJQUNQLFNBQVMsR0FBRyxJQUFJLGVBQWUsQ0FBNEI7UUFDMUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNULEtBQUssRUFBRSxDQUFDLENBQUM7S0FDVixDQUFDLENBQUM7SUFFSCxJQUFJLFNBQVMsQ0FBQyxTQUFZO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELElBQUksR0FBRztRQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDbkIsb0JBQW9CLEVBQUUsQ0FDdkIsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDbkIsb0JBQW9CLEVBQUUsQ0FDdkIsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxZQUFZLElBQU8sRUFBRSxXQUE4QztRQUNqRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEMsQ0FBQztJQUNILENBQUM7SUFFRCxhQUFhLENBQUMsUUFBNEM7UUFDeEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDbEIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRTtZQUM1QixHQUFHLFFBQVE7U0FDWixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxHQUFHLENBQUMsS0FBVSxFQUFtQixFQUFFO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3BCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQzdELENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nSXRlcmFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGludGVyZmFjZSBSeExpc3RWaWV3Q29tcHV0ZWRDb250ZXh0IHtcbiAgaW5kZXg6IG51bWJlcjtcbiAgY291bnQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSeExpc3RWaWV3Q29udGV4dDxULCBVID0gUnhMaXN0Vmlld0NvbXB1dGVkQ29udGV4dD5cbiAgZXh0ZW5kcyBSeExpc3RWaWV3Q29tcHV0ZWRDb250ZXh0IHtcbiAgJGltcGxpY2l0OiBUO1xuICBpdGVtJDogT2JzZXJ2YWJsZTxUPjtcbiAgdXBkYXRlQ29udGV4dChuZXdQcm9wczogUGFydGlhbDxVPik6IHZvaWQ7XG59XG5cbmNvbnN0IGNvbXB1dGVGaXJzdCA9ICh7IGNvdW50LCBpbmRleCB9KSA9PiBpbmRleCA9PT0gMDtcbmNvbnN0IGNvbXB1dGVMYXN0ID0gKHsgY291bnQsIGluZGV4IH0pID0+IGluZGV4ID09PSBjb3VudCAtIDE7XG5jb25zdCBjb21wdXRlRXZlbiA9ICh7IGNvdW50LCBpbmRleCB9KSA9PiBpbmRleCAlIDIgPT09IDA7XG5cbmV4cG9ydCBjbGFzcyBSeERlZmF1bHRMaXN0Vmlld0NvbnRleHQ8XG4gIFQsXG4gIFUgZXh0ZW5kcyBOZ0l0ZXJhYmxlPFQ+ID0gTmdJdGVyYWJsZTxUPixcbiAgSyA9IGtleW9mIFRcbj4gaW1wbGVtZW50cyBSeExpc3RWaWV3Q29udGV4dDxUPlxue1xuICByZWFkb25seSBfaXRlbSA9IG5ldyBSZXBsYXlTdWJqZWN0PFQ+KDEpO1xuICBpdGVtJCA9IHRoaXMuX2l0ZW0uYXNPYnNlcnZhYmxlKCk7XG4gIHByaXZhdGUgXyRpbXBsaWNpdDogVDtcbiAgcHJpdmF0ZSBfJGNvbXBsZXRlOiBib29sZWFuO1xuICBwcml2YXRlIF8kZXJyb3I6IGZhbHNlIHwgRXJyb3I7XG4gIHByaXZhdGUgXyRzdXNwZW5zZTogYW55O1xuICBwcml2YXRlIHJlYWRvbmx5IF9jb250ZXh0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UnhMaXN0Vmlld0NvbXB1dGVkQ29udGV4dD4oe1xuICAgIGluZGV4OiAtMSxcbiAgICBjb3VudDogLTEsXG4gIH0pO1xuXG4gIHNldCAkaW1wbGljaXQoJGltcGxpY2l0OiBUKSB7XG4gICAgdGhpcy5fJGltcGxpY2l0ID0gJGltcGxpY2l0O1xuICAgIHRoaXMuX2l0ZW0ubmV4dCgkaW1wbGljaXQpO1xuICB9XG5cbiAgZ2V0ICRpbXBsaWNpdCgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fJGltcGxpY2l0O1xuICB9XG5cbiAgZ2V0ICRjb21wbGV0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fJGNvbXBsZXRlO1xuICB9XG5cbiAgZ2V0ICRlcnJvcigpOiBmYWxzZSB8IEVycm9yIHtcbiAgICByZXR1cm4gdGhpcy5fJGVycm9yO1xuICB9XG5cbiAgZ2V0ICRzdXNwZW5zZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl8kc3VzcGVuc2U7XG4gIH1cblxuICBnZXQgaW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dCQuZ2V0VmFsdWUoKS5pbmRleDtcbiAgfVxuXG4gIGdldCBjb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0JC5nZXRWYWx1ZSgpLmNvdW50O1xuICB9XG5cbiAgZ2V0IGZpcnN0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjb21wdXRlRmlyc3QodGhpcy5fY29udGV4dCQuZ2V0VmFsdWUoKSk7XG4gIH1cblxuICBnZXQgbGFzdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gY29tcHV0ZUxhc3QodGhpcy5fY29udGV4dCQuZ2V0VmFsdWUoKSk7XG4gIH1cblxuICBnZXQgZXZlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gY29tcHV0ZUV2ZW4odGhpcy5fY29udGV4dCQuZ2V0VmFsdWUoKSk7XG4gIH1cblxuICBnZXQgb2RkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5ldmVuO1xuICB9XG5cbiAgZ2V0IGluZGV4JCgpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0JC5waXBlKFxuICAgICAgbWFwKChjKSA9PiBjLmluZGV4KSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICApO1xuICB9XG5cbiAgZ2V0IGNvdW50JCgpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0JC5waXBlKFxuICAgICAgbWFwKChzKSA9PiBzLmNvdW50KSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICApO1xuICB9XG5cbiAgZ2V0IGZpcnN0JCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dCQucGlwZShtYXAoY29tcHV0ZUZpcnN0KSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cblxuICBnZXQgbGFzdCQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQkLnBpcGUobWFwKGNvbXB1dGVMYXN0KSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cblxuICBnZXQgZXZlbiQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQkLnBpcGUobWFwKGNvbXB1dGVFdmVuKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cblxuICBnZXQgb2RkJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5ldmVuJC5waXBlKG1hcCgoZXZlbikgPT4gIWV2ZW4pKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGl0ZW06IFQsIGN1c3RvbVByb3BzPzogeyBjb3VudDogbnVtYmVyOyBpbmRleDogbnVtYmVyIH0pIHtcbiAgICB0aGlzLiRpbXBsaWNpdCA9IGl0ZW07XG4gICAgaWYgKGN1c3RvbVByb3BzKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbnRleHQoY3VzdG9tUHJvcHMpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNvbnRleHQobmV3UHJvcHM6IFBhcnRpYWw8UnhMaXN0Vmlld0NvbXB1dGVkQ29udGV4dD4pOiB2b2lkIHtcbiAgICB0aGlzLl9jb250ZXh0JC5uZXh0KHtcbiAgICAgIC4uLnRoaXMuX2NvbnRleHQkLmdldFZhbHVlKCksXG4gICAgICAuLi5uZXdQcm9wcyxcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdCA9IChwcm9wczogS1tdKTogT2JzZXJ2YWJsZTxhbnk+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5pdGVtJC5waXBlKFxuICAgICAgbWFwKChyKSA9PiBwcm9wcy5yZWR1Y2UoKGFjYywga2V5KSA9PiBhY2M/LltrZXkgYXMgYW55XSwgcikpXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==