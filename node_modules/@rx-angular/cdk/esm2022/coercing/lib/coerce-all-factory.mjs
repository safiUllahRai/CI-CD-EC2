import { Subject } from 'rxjs';
import { switchAll } from 'rxjs/operators';
import { coerceDistinctWith } from './coerceDistinctObservableWith';
/**
 * A factory function returning an object to handle the process of merging Observable next notifications into one
 *   Observable. This API takes away the clumsy handling of static values and Observable, reduces the number of
 *   emissions by:
 * - only merging distinct Observables
 * - only emit distinct values of the merged result
 *
 * You can next a Observable of `U` multiple times and merge them into the Observable exposed under one optimized
 *   `values$`
 *
 */
export function coerceAllFactory(subjectFactory, flattenOperator) {
    const observablesSubject = subjectFactory ? subjectFactory() : new Subject();
    flattenOperator = flattenOperator || switchAll();
    const values$ = observablesSubject.pipe(coerceDistinctWith(flattenOperator));
    return {
        next(observable) {
            observablesSubject.next(observable);
        },
        values$,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29lcmNlLWFsbC1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvY29lcmNpbmcvc3JjL2xpYi9jb2VyY2UtYWxsLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRXBFOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLGNBQWlELEVBQ2pELGVBQW9EO0lBS3BELE1BQU0sa0JBQWtCLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUM3RSxlQUFlLEdBQUcsZUFBZSxJQUFLLFNBQVMsRUFBVSxDQUFDO0lBQzFELE1BQU0sT0FBTyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FDckMsa0JBQWtCLENBQUMsZUFBc0IsQ0FBQyxDQUMxQixDQUFDO0lBRW5CLE9BQU87UUFDTCxJQUFJLENBQUMsVUFBNkI7WUFDaEMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFDRCxPQUFPO0tBQ1IsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPcGVyYXRvckZ1bmN0aW9uLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hBbGwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBjb2VyY2VEaXN0aW5jdFdpdGggfSBmcm9tICcuL2NvZXJjZURpc3RpbmN0T2JzZXJ2YWJsZVdpdGgnO1xuXG4vKipcbiAqIEEgZmFjdG9yeSBmdW5jdGlvbiByZXR1cm5pbmcgYW4gb2JqZWN0IHRvIGhhbmRsZSB0aGUgcHJvY2VzcyBvZiBtZXJnaW5nIE9ic2VydmFibGUgbmV4dCBub3RpZmljYXRpb25zIGludG8gb25lXG4gKiAgIE9ic2VydmFibGUuIFRoaXMgQVBJIHRha2VzIGF3YXkgdGhlIGNsdW1zeSBoYW5kbGluZyBvZiBzdGF0aWMgdmFsdWVzIGFuZCBPYnNlcnZhYmxlLCByZWR1Y2VzIHRoZSBudW1iZXIgb2ZcbiAqICAgZW1pc3Npb25zIGJ5OlxuICogLSBvbmx5IG1lcmdpbmcgZGlzdGluY3QgT2JzZXJ2YWJsZXNcbiAqIC0gb25seSBlbWl0IGRpc3RpbmN0IHZhbHVlcyBvZiB0aGUgbWVyZ2VkIHJlc3VsdFxuICpcbiAqIFlvdSBjYW4gbmV4dCBhIE9ic2VydmFibGUgb2YgYFVgIG11bHRpcGxlIHRpbWVzIGFuZCBtZXJnZSB0aGVtIGludG8gdGhlIE9ic2VydmFibGUgZXhwb3NlZCB1bmRlciBvbmUgb3B0aW1pemVkXG4gKiAgIGB2YWx1ZXMkYFxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZXJjZUFsbEZhY3Rvcnk8VSwgUiA9IFU+KFxuICBzdWJqZWN0RmFjdG9yeT86ICgpID0+IFN1YmplY3Q8T2JzZXJ2YWJsZTxVPiB8IFU+LFxuICBmbGF0dGVuT3BlcmF0b3I/OiBPcGVyYXRvckZ1bmN0aW9uPE9ic2VydmFibGU8VT4sIFI+XG4pOiB7XG4gIHZhbHVlcyQ6IE9ic2VydmFibGU8Uj47XG4gIG5leHQob2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxVPiB8IFUpOiB2b2lkO1xufSB7XG4gIGNvbnN0IG9ic2VydmFibGVzU3ViamVjdCA9IHN1YmplY3RGYWN0b3J5ID8gc3ViamVjdEZhY3RvcnkoKSA6IG5ldyBTdWJqZWN0KCk7XG4gIGZsYXR0ZW5PcGVyYXRvciA9IGZsYXR0ZW5PcGVyYXRvciB8fCAoc3dpdGNoQWxsKCkgYXMgYW55KTtcbiAgY29uc3QgdmFsdWVzJCA9IG9ic2VydmFibGVzU3ViamVjdC5waXBlKFxuICAgIGNvZXJjZURpc3RpbmN0V2l0aChmbGF0dGVuT3BlcmF0b3IgYXMgYW55KVxuICApIGFzIE9ic2VydmFibGU8Uj47XG5cbiAgcmV0dXJuIHtcbiAgICBuZXh0KG9ic2VydmFibGU6IE9ic2VydmFibGU8VT4gfCBVKSB7XG4gICAgICBvYnNlcnZhYmxlc1N1YmplY3QubmV4dChvYnNlcnZhYmxlKTtcbiAgICB9LFxuICAgIHZhbHVlcyQsXG4gIH07XG59XG4iXX0=