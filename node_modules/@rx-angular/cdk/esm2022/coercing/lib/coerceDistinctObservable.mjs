import { distinctUntilChanged, switchAll } from 'rxjs/operators';
import { coerceObservable } from './coerceObservable';
/**
 * This Observable factory creates an Observable out of a static value or an Observable.
 * It forwards only distinct values from distinct incoming Observables or values.
 * This comes in handy in any environment where you handle processing of incoming dynamic values and their state.
 *
 * Optionally you can pass a flatten strategy to get find grained control of the flattening process. E.g. mergeAll, switchAll
 *
 * @param o$ - The Observable to coerce and map to a Observable with distinct values
 * @param flattenOperator - determines the flattening strategy e.g. mergeAll, concatAll, exhaust, switchAll. default is switchAll
 */
export function coerceDistinctObservable(o$, flattenOperator) {
    flattenOperator = flattenOperator || switchAll();
    return coerceObservable(o$).pipe(distinctUntilChanged(), flattenOperator, distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29lcmNlRGlzdGluY3RPYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jZGsvY29lcmNpbmcvc3JjL2xpYi9jb2VyY2VEaXN0aW5jdE9ic2VydmFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXREOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsRUFBaUMsRUFDakMsZUFBb0Q7SUFFcEQsZUFBZSxHQUFHLGVBQWUsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUNqRCxPQUFPLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDOUIsb0JBQW9CLEVBQUUsRUFDdEIsZUFBZSxFQUNmLG9CQUFvQixFQUFFLENBQ3ZCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIHN3aXRjaEFsbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGNvZXJjZU9ic2VydmFibGUgfSBmcm9tICcuL2NvZXJjZU9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoaXMgT2JzZXJ2YWJsZSBmYWN0b3J5IGNyZWF0ZXMgYW4gT2JzZXJ2YWJsZSBvdXQgb2YgYSBzdGF0aWMgdmFsdWUgb3IgYW4gT2JzZXJ2YWJsZS5cbiAqIEl0IGZvcndhcmRzIG9ubHkgZGlzdGluY3QgdmFsdWVzIGZyb20gZGlzdGluY3QgaW5jb21pbmcgT2JzZXJ2YWJsZXMgb3IgdmFsdWVzLlxuICogVGhpcyBjb21lcyBpbiBoYW5keSBpbiBhbnkgZW52aXJvbm1lbnQgd2hlcmUgeW91IGhhbmRsZSBwcm9jZXNzaW5nIG9mIGluY29taW5nIGR5bmFtaWMgdmFsdWVzIGFuZCB0aGVpciBzdGF0ZS5cbiAqXG4gKiBPcHRpb25hbGx5IHlvdSBjYW4gcGFzcyBhIGZsYXR0ZW4gc3RyYXRlZ3kgdG8gZ2V0IGZpbmQgZ3JhaW5lZCBjb250cm9sIG9mIHRoZSBmbGF0dGVuaW5nIHByb2Nlc3MuIEUuZy4gbWVyZ2VBbGwsIHN3aXRjaEFsbFxuICpcbiAqIEBwYXJhbSBvJCAtIFRoZSBPYnNlcnZhYmxlIHRvIGNvZXJjZSBhbmQgbWFwIHRvIGEgT2JzZXJ2YWJsZSB3aXRoIGRpc3RpbmN0IHZhbHVlc1xuICogQHBhcmFtIGZsYXR0ZW5PcGVyYXRvciAtIGRldGVybWluZXMgdGhlIGZsYXR0ZW5pbmcgc3RyYXRlZ3kgZS5nLiBtZXJnZUFsbCwgY29uY2F0QWxsLCBleGhhdXN0LCBzd2l0Y2hBbGwuIGRlZmF1bHQgaXMgc3dpdGNoQWxsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VEaXN0aW5jdE9ic2VydmFibGU8VD4oXG4gIG8kOiBPYnNlcnZhYmxlPE9ic2VydmFibGU8VD4gfCBUPixcbiAgZmxhdHRlbk9wZXJhdG9yPzogT3BlcmF0b3JGdW5jdGlvbjxPYnNlcnZhYmxlPFQ+LCBUPlxuKSB7XG4gIGZsYXR0ZW5PcGVyYXRvciA9IGZsYXR0ZW5PcGVyYXRvciB8fCBzd2l0Y2hBbGwoKTtcbiAgcmV0dXJuIGNvZXJjZU9ic2VydmFibGUobyQpLnBpcGUoXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICBmbGF0dGVuT3BlcmF0b3IsXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICApO1xufVxuIl19