import { distinctUntilChanged, switchAll } from 'rxjs/operators';
import { coerceObservableWith } from './coerceObservableWith';
/**
 * This operator takes an Observable of values ot Observables aof values and
 * It forwards only distinct values from distinct incoming Observables or values.
 * This comes in handy in any environment where you handle processing of incoming dynamic values and their state.
 *
 * Optionally you can pass a flatten strategy to get find grained control of the flattening process. E.g. mergeAll, switchAll
 *
 * @param flattenOperator - determines the flattening strategy e.g. mergeAll, concatAll, exhaust, switchAll. default is switchAll
 *
 */
export function coerceDistinctWith(flattenOperator) {
    flattenOperator = flattenOperator || switchAll();
    return (o$) => o$.pipe(coerceObservableWith(), distinctUntilChanged(), flattenOperator, distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29lcmNlRGlzdGluY3RPYnNlcnZhYmxlV2l0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2RrL2NvZXJjaW5nL3NyYy9saWIvY29lcmNlRGlzdGluY3RPYnNlcnZhYmxlV2l0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUNoQyxlQUFvRDtJQUVwRCxlQUFlLEdBQUcsZUFBZSxJQUFJLFNBQVMsRUFBRSxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxFQUFpQyxFQUFFLEVBQUUsQ0FDM0MsRUFBRSxDQUFDLElBQUksQ0FDTCxvQkFBb0IsRUFBRSxFQUN0QixvQkFBb0IsRUFBRSxFQUN0QixlQUFlLEVBQ2Ysb0JBQW9CLEVBQUUsQ0FDdkIsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPcGVyYXRvckZ1bmN0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgc3dpdGNoQWxsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgY29lcmNlT2JzZXJ2YWJsZVdpdGggfSBmcm9tICcuL2NvZXJjZU9ic2VydmFibGVXaXRoJztcblxuLyoqXG4gKiBUaGlzIG9wZXJhdG9yIHRha2VzIGFuIE9ic2VydmFibGUgb2YgdmFsdWVzIG90IE9ic2VydmFibGVzIGFvZiB2YWx1ZXMgYW5kXG4gKiBJdCBmb3J3YXJkcyBvbmx5IGRpc3RpbmN0IHZhbHVlcyBmcm9tIGRpc3RpbmN0IGluY29taW5nIE9ic2VydmFibGVzIG9yIHZhbHVlcy5cbiAqIFRoaXMgY29tZXMgaW4gaGFuZHkgaW4gYW55IGVudmlyb25tZW50IHdoZXJlIHlvdSBoYW5kbGUgcHJvY2Vzc2luZyBvZiBpbmNvbWluZyBkeW5hbWljIHZhbHVlcyBhbmQgdGhlaXIgc3RhdGUuXG4gKlxuICogT3B0aW9uYWxseSB5b3UgY2FuIHBhc3MgYSBmbGF0dGVuIHN0cmF0ZWd5IHRvIGdldCBmaW5kIGdyYWluZWQgY29udHJvbCBvZiB0aGUgZmxhdHRlbmluZyBwcm9jZXNzLiBFLmcuIG1lcmdlQWxsLCBzd2l0Y2hBbGxcbiAqXG4gKiBAcGFyYW0gZmxhdHRlbk9wZXJhdG9yIC0gZGV0ZXJtaW5lcyB0aGUgZmxhdHRlbmluZyBzdHJhdGVneSBlLmcuIG1lcmdlQWxsLCBjb25jYXRBbGwsIGV4aGF1c3QsIHN3aXRjaEFsbC4gZGVmYXVsdCBpcyBzd2l0Y2hBbGxcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VEaXN0aW5jdFdpdGg8VD4oXG4gIGZsYXR0ZW5PcGVyYXRvcj86IE9wZXJhdG9yRnVuY3Rpb248T2JzZXJ2YWJsZTxUPiwgVD5cbikge1xuICBmbGF0dGVuT3BlcmF0b3IgPSBmbGF0dGVuT3BlcmF0b3IgfHwgc3dpdGNoQWxsKCk7XG4gIHJldHVybiAobyQ6IE9ic2VydmFibGU8T2JzZXJ2YWJsZTxUPiB8IFQ+KSA9PlxuICAgIG8kLnBpcGUoXG4gICAgICBjb2VyY2VPYnNlcnZhYmxlV2l0aCgpLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIGZsYXR0ZW5PcGVyYXRvcixcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICApO1xufVxuIl19