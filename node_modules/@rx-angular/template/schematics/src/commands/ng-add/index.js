"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngAdd = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const dependencies_2 = require("@schematics/angular/utility/dependencies");
const get_latest_node_version_1 = require("../../utils/get-latest-node-version");
const dependencies = [
    {
        type: dependencies_1.NodeDependencyType.Default,
        name: '@rx-angular/cdk',
        overwrite: true,
    },
];
function addPackageJsonDependencies(packages) {
    return (tree, context) => __awaiter(this, void 0, void 0, function* () {
        var _a, e_1, _b, _c;
        try {
            for (var _d = true, packages_1 = __asyncValues(packages), packages_1_1; packages_1_1 = yield packages_1.next(), _a = packages_1_1.done, !_a; _d = true) {
                _c = packages_1_1.value;
                _d = false;
                const dependency = _c;
                const version = yield (0, get_latest_node_version_1.getLatestNodeVersion)(dependency.name);
                (0, dependencies_2.addPackageJsonDependency)(tree, Object.assign(Object.assign({}, dependency), { version }));
                context.logger.info(`✅️ Added dependency ${dependency.name}@${version}`);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = packages_1.return)) yield _b.call(packages_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
function installDependencies() {
    return (tree, ctx) => {
        ctx.addTask(new tasks_1.NodePackageInstallTask());
        ctx.logger.info('✅️ Dependencies installed');
        return tree;
    };
}
function ngAdd() {
    return (0, schematics_1.chain)([
        addPackageJsonDependencies(dependencies),
        installDependencies(),
    ]);
}
exports.ngAdd = ngAdd;
