{"version":3,"file":"template-for.mjs","sources":["../../../../libs/template/for/src/lib/for-view-context.ts","../../../../libs/template/for/src/lib/for.directive.ts","../../../../libs/template/for/src/template-for.ts"],"sourcesContent":["import { NgIterable } from '@angular/core';\nimport { RxDefaultListViewContext } from '@rx-angular/cdk/template';\n\nexport class RxForViewContext<\n  T,\n  U extends NgIterable<T> = NgIterable<T>,\n  K = keyof T\n> extends RxDefaultListViewContext<T, U, K> {\n  constructor(\n    item: T,\n    public rxForOf: U,\n    customProps?: { count: number; index: number }\n  ) {\n    super(item, customProps);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  ErrorHandler,\n  inject,\n  Injector,\n  Input,\n  isSignal,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Signal,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport { toObservable } from '@angular/core/rxjs-interop';\nimport {\n  coerceDistinctWith,\n  coerceObservableWith,\n} from '@rx-angular/cdk/coercing';\nimport {\n  RxStrategyNames,\n  RxStrategyProvider,\n} from '@rx-angular/cdk/render-strategies';\nimport {\n  createListTemplateManager,\n  RxListManager,\n  RxListViewComputedContext,\n} from '@rx-angular/cdk/template';\nimport {\n  isObservable,\n  Observable,\n  ReplaySubject,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport { shareReplay, switchAll } from 'rxjs/operators';\nimport { RxForViewContext } from './for-view-context';\n\n/**\n * @description Will be provided through Terser global definitions by Angular CLI\n * during the production build.\n */\ndeclare const ngDevMode: boolean;\n\n/**\n * @Directive RxFor\n *\n * @description\n *\n * The most common way to render lists in angular is by using the `*ngFor` structural directive. `*ngFor` is able\n * to take an arbitrary list of data and repeat a defined template per item of the list. However, it can\n * only do it synchronously.\n *\n * Compared to the `NgFor`, `RxFor` treats each child template as single renderable unit.\n * The change detection of the child templates get prioritized, scheduled and executed by\n * leveraging `RenderStrategies` under the hood.\n * This technique enables non-blocking rendering of lists and can be referred to as `concurrent mode`.\n *\n * Read more about this in the [strategies\n * section](https://www.rx-angular.io/docs/template/api/rx-for-directive#rxfor-with-concurrent-strategies).\n *\n * Furthermore, `RxFor` provides hooks to react to rendered items in form of a `renderCallback: Subject`.\n *\n * Together with the `RxRenderStrategies`, this makes the rendering behavior extremely versatile\n * and transparent for the developer.\n * Each instance of `RxFor` can be configured to render with different settings.\n *\n * Read more in the [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive)\n *\n * @docsCategory RxFor\n * @docsPage RxFor\n * @publicApi\n */\n@Directive({\n  selector: '[rxFor][rxForOf]',\n  standalone: true,\n})\nexport class RxFor<T, U extends NgIterable<T> = NgIterable<T>>\n  implements OnInit, DoCheck, OnDestroy\n{\n  /** @internal */\n  private iterableDiffers = inject(IterableDiffers);\n  /** @internal */\n  private cdRef = inject(ChangeDetectorRef);\n  /** @internal */\n  private ngZone = inject(NgZone);\n  /** @internal */\n  private injector = inject(Injector);\n  /** @internal */\n  private viewContainerRef = inject(ViewContainerRef);\n  /** @internal */\n  private strategyProvider = inject(RxStrategyProvider);\n  /** @internal */\n  private errorHandler = inject(ErrorHandler);\n\n  /** @internal */\n  private staticValue?: U;\n  /** @internal */\n  private renderStatic = false;\n\n  /**\n   * @description\n   * The iterable input\n   *\n   * @example\n   * <ng-container *rxFor=\"heroes$; let hero\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   *\n   * @param { Observable<(U & NgIterable<T>) | undefined | null>\n   *       | Signal<(U & NgIterable<T>) | undefined | null>\n   *       | (U & NgIterable<T>)\n   *       | null\n   *       | undefined } potentialSignalOrObservable\n   */\n  @Input()\n  set rxForOf(\n    potentialSignalOrObservable:\n      | Observable<(U & NgIterable<T>) | undefined | null>\n      | Signal<(U & NgIterable<T>) | undefined | null>\n      | (U & NgIterable<T>)\n      | null\n      | undefined,\n  ) {\n    if (isSignal(potentialSignalOrObservable)) {\n      this.staticValue = undefined;\n      this.renderStatic = false;\n      this.observables$.next(\n        toObservable(potentialSignalOrObservable, { injector: this.injector }),\n      );\n    } else if (!isObservable(potentialSignalOrObservable)) {\n      this.staticValue = potentialSignalOrObservable;\n      this.renderStatic = true;\n    } else {\n      this.staticValue = undefined;\n      this.renderStatic = false;\n      this.observables$.next(potentialSignalOrObservable);\n    }\n  }\n\n  /**\n   * @internal\n   * A reference to the template that is created for each item in the iterable.\n   * @see [template reference variable](guide/template-reference-variables)\n   * (inspired by @angular/common `ng_for_of.ts`)\n   */\n  private _template: TemplateRef<RxForViewContext<T, U>>;\n  @Input()\n  set rxForTemplate(value: TemplateRef<RxForViewContext<T, U>>) {\n    this._template = value;\n  }\n\n  /**\n   * @description\n   *\n   * You can change the used `RenderStrategy` by using the `strategy` input of the `*rxFor`. It accepts\n   * an `Observable<RxStrategyNames>` or [`RxStrategyNames`](https://github.com/rx-angular/rx-angular/blob/b0630f69017cc1871d093e976006066d5f2005b9/libs/cdk/render-strategies/src/lib/model.ts#L52).\n   *\n   * The default value for strategy is\n   * [`normal`](https://www.rx-angular.io/docs/template/cdk/render-strategies/strategies/concurrent-strategies).\n   *\n   * Read more about this in the\n   * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#use-render-strategies-strategy).\n   *\n   * @example\n   *\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *     <ng-container *rxFor=\"let hero of heroes$; strategy: strategy\">\n   *       <app-hero [hero]=\"hero\"></app-hero>\n   *     </ng-container>\n   *\n   *     <ng-container *rxFor=\"let hero of heroes$; strategy: strategy$\">\n   *       <app-hero [hero]=\"hero\"></app-hero>\n   *     </ng-container>\n   *   `\n   * })\n   * export class AppComponent {\n   *   strategy = 'low';\n   *   strategy$ = of('immediate');\n   * }\n   *\n   * @param {string | Observable<string> | undefined} strategyName\n   * @see {@link strategies}\n   */\n  @Input()\n  set rxForStrategy(\n    strategyName: RxStrategyNames | Observable<RxStrategyNames> | undefined,\n  ) {\n    this.strategyInput$.next(strategyName);\n  }\n\n  /**\n   * @description\n   *\n   * When local rendering strategies are used, we need to treat view and content queries in a\n   * special way.\n   * To make `*rxFor` in such situations, a certain mechanism is implemented to\n   * execute change detection on the parent (`parent`).\n   *\n   * This is required if your components state is dependent on its view or content children:\n   *\n   * - `@ViewChild`\n   * - `@ViewChildren`\n   * - `@ContentChild`\n   * - `@ContentChildren`\n   *\n   * Read more about this in the\n   * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#local-strategies-and-view-content-queries-parent).\n   *\n   * @example\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *    <app-list-component>\n   *      <app-list-item\n   *        *rxFor=\"\n   *          let item of items$;\n   *          trackBy: trackItem;\n   *          parent: true;\n   *        \"\n   *      >\n   *        <div>{{ item.name }}</div>\n   *      </app-list-item>\n   *    </app-list-component>\n   *   `\n   * })\n   * export class AppComponent {\n   *   items$ = itemService.getItems();\n   * }\n   *\n   * @param {boolean} renderParent\n   *\n   * @deprecated this flag will be dropped soon, as it is no longer required when using signal based view & content queries\n   */\n  @Input('rxForParent') renderParent = this.strategyProvider.config.parent;\n\n  /**\n   * @description\n   *\n   * A flag to control whether *rxFor templates are created within `NgZone` or not.\n   * The default value is `true, `*rxFor` will create it's `EmbeddedViews` inside `NgZone`.\n   *\n   * Event listeners normally trigger zone. Especially high frequently events cause performance issues.\n   *\n   * Read more about this in the\n   * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#working-with-event-listeners-patchzone).\n   *\n   * @example\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *    <app-list-component>\n   *      <app-list-item\n   *        *rxFor=\"\n   *          let item of items$;\n   *          trackBy: trackItem;\n   *          patchZone: false;\n   *        \"\n   *      >\n   *        <div>{{ item.name }}</div>\n   *      </app-list-item>\n   *    </app-list-component>\n   *   `\n   * })\n   * export class AppComponent {\n   *   items$ = itemService.getItems();\n   * }\n   *\n   * @param {boolean} patchZone\n   */\n  @Input('rxForPatchZone') patchZone = this.strategyProvider.config.patchZone;\n\n  /**\n   * @description\n   * A function or key that defines how to track changes for items in the iterable.\n   *\n   * When items are added, moved, or removed in the iterable,\n   * the directive must re-render the appropriate DOM nodes.\n   * To minimize churn in the DOM, only nodes that have changed\n   * are re-rendered.\n   *\n   * By default, rxFor assumes that the object instance identifies the node in the iterable (equality check `===`).\n   * When a function or key is supplied, rxFor uses the result to identify the item node.\n   *\n   * @example\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *    <app-list-component>\n   *      <app-list-item\n   *        *rxFor=\"\n   *          let item of items$;\n   *          trackBy: 'id';\n   *        \"\n   *      >\n   *        <div>{{ item.name }}</div>\n   *      </app-list-item>\n   *    </app-list-component>\n   *   `\n   * })\n   * export class AppComponent {\n   *   items$ = itemService.getItems();\n   * }\n   *\n   * // OR\n   *\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *    <app-list-component>\n   *      <app-list-item\n   *        *rxFor=\"\n   *          let item of items$;\n   *          trackBy: trackItem;\n   *        \"\n   *      >\n   *        <div>{{ item.name }}</div>\n   *      </app-list-item>\n   *    </app-list-component>\n   *   `\n   * })\n   * export class AppComponent {\n   *   items$ = itemService.getItems();\n   *   trackItem = (idx, item) => item.id;\n   * }\n   *\n   * @param trackByFnOrKey\n   */\n  @Input('rxForTrackBy')\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  set trackBy(trackByFnOrKey: keyof T | ((idx: number, i: T) => any)) {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      trackByFnOrKey != null &&\n      typeof trackByFnOrKey !== 'string' &&\n      typeof trackByFnOrKey !== 'function'\n    ) {\n      console.warn(\n        `trackBy must be a function, but received ${JSON.stringify(\n          trackByFnOrKey,\n        )}.`,\n      );\n    }\n    if (trackByFnOrKey == null) {\n      this._trackBy = null;\n    } else {\n      this._trackBy =\n        typeof trackByFnOrKey !== 'function'\n          ? (i, a) => a[trackByFnOrKey]\n          : trackByFnOrKey;\n    }\n  }\n\n  /**\n   * @description\n   * A `Subject` which emits whenever *rxFor finished rendering a set changes to the view.\n   * This enables developers to perform actions when a list has finished rendering.\n   * The `renderCallback` is useful in situations where you rely on specific DOM properties like the `height` a\n   * table after all items got rendered.\n   * It is also possible to use the renderCallback in order to determine if a view should be visible or not. This\n   * way developers can hide a list as long as it has not finished rendering.\n   *\n   * The result of the `renderCallback` will contain the currently rendered set of items in the iterable.\n   *\n   * @example\n   * \\Component({\n   *   selector: 'app-root',\n   *   template: `\n   *   <app-list-component>\n   *     <app-list-item\n   *       *rxFor=\"\n   *         let item of items$;\n   *         trackBy: trackItem;\n   *         renderCallback: itemsRendered;\n   *       \">\n   *       <div>{{ item.name }}</div>\n   *     </app-list-item>\n   *   </app-list-component>\n   * `\n   * })\n   * export class AppComponent {\n   *   items$: Observable<Item[]> = itemService.getItems();\n   *   trackItem = (idx, item) => item.id;\n   *   // this emits whenever rxFor finished rendering changes\n   *   itemsRendered = new Subject<Item[]>();\n   *\n   *   constructor(elementRef: ElementRef<HTMLElement>) {\n   *     itemsRendered.subscribe(() => {\n   *       // items are rendered, we can now scroll\n   *       elementRef.scrollTo({bottom: 0});\n   *     })\n   *   }\n   * }\n   *\n   * @param {Subject<U>} renderCallback\n   */\n  @Input('rxForRenderCallback') set renderCallback(renderCallback: Subject<U>) {\n    this._renderCallback = renderCallback;\n  }\n\n  private get template(): TemplateRef<RxForViewContext<T, U>> {\n    return this._template || this.templateRef;\n  }\n\n  /** @internal */\n  private strategyInput$ = new ReplaySubject<\n    RxStrategyNames | Observable<RxStrategyNames>\n  >(1);\n\n  /** @internal */\n  private observables$ = new ReplaySubject<Observable<U> | U>(1);\n\n  /** @internal */\n  private _renderCallback: Subject<any>;\n\n  /** @internal */\n  private readonly values$ = this.observables$.pipe(\n    coerceObservableWith(),\n    switchAll(),\n    shareReplay({ refCount: true, bufferSize: 1 }),\n  );\n\n  /** @internal */\n  private values: U | undefined | null = null;\n\n  /** @internal */\n  private readonly strategy$ = this.strategyInput$.pipe(coerceDistinctWith());\n\n  /** @internal */\n  private listManager: RxListManager<T>;\n\n  /** @internal */\n  private _subscription = new Subscription();\n\n  /** @internal */\n  _trackBy: TrackByFunction<T>;\n  /** @internal */\n  _distinctBy = (a: T, b: T) => a === b;\n\n  constructor(\n    private readonly templateRef: TemplateRef<RxForViewContext<T, U>>,\n  ) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._subscription.add(this.values$.subscribe((v) => (this.values = v)));\n    this.listManager = createListTemplateManager<T, RxForViewContext<T>>({\n      iterableDiffers: this.iterableDiffers,\n      renderSettings: {\n        cdRef: this.cdRef,\n        strategies: this.strategyProvider.strategies as any, // TODO: move strategyProvider\n        defaultStrategyName: this.strategyProvider.primaryStrategy,\n        parent: !!this.renderParent,\n        patchZone: this.patchZone ? this.ngZone : false,\n        errorHandler: this.errorHandler,\n      },\n      templateSettings: {\n        viewContainerRef: this.viewContainerRef,\n        templateRef: this.template,\n        createViewContext: this.createViewContext.bind(this),\n        updateViewContext: this.updateViewContext.bind(this),\n      },\n      trackBy: this._trackBy,\n    });\n    this.listManager.nextStrategy(this.strategy$);\n    this._subscription.add(\n      this.listManager\n        .render(this.values$)\n        .subscribe((v) => this._renderCallback?.next(v)),\n    );\n  }\n\n  /** @internal */\n  createViewContext(\n    item: T,\n    computedContext: RxListViewComputedContext,\n  ): RxForViewContext<T, U> {\n    return new RxForViewContext<T, U>(item, this.values, computedContext);\n  }\n\n  /** @internal */\n  updateViewContext(\n    item: T,\n    view: EmbeddedViewRef<RxForViewContext<T>>,\n    computedContext: RxListViewComputedContext,\n  ): void {\n    view.context.updateContext(computedContext);\n    view.context.rxForOf = this.values;\n    view.context.$implicit = item;\n  }\n\n  /** @internal */\n  ngDoCheck() {\n    if (this.renderStatic) {\n      this.observables$.next(this.staticValue);\n    }\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n    this.viewContainerRef.clear();\n  }\n\n  /** @internal */\n  static ngTemplateContextGuard<\n    T,\n    U extends NgIterable<T> = NgIterable<T>,\n    K = keyof T,\n  >(dir: RxFor<T, U>, ctx: any): ctx is RxForViewContext<T, U, K> {\n    return true;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}