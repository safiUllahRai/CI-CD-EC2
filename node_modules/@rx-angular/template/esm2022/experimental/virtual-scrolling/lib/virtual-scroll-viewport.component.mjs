import { NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, inject, Input, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { defer, ReplaySubject, Subject } from 'rxjs';
import { distinctUntilChanged, filter, take, takeUntil } from 'rxjs/operators';
import { RxVirtualScrollElement, RxVirtualScrollStrategy, RxVirtualScrollViewport, RxVirtualViewRepeater, } from './model';
import { observeElementSize } from './observe-element-size';
import { unpatchedScroll } from './util';
import * as i0 from "@angular/core";
const NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
/**
 * @Component RxVirtualScrollViewport
 *
 * @description
 * Container component comparable to CdkVirtualScrollViewport acting as viewport
 * for `*rxVirtualFor` to operate on.
 *
 * Its main purpose is to implement the `RxVirtualScrollViewport` interface
 * as well as maintaining the scroll runways' height in order to give
 * the provided `RxVirtualScrollStrategy` room to position items.
 *
 * Furthermore, it will gather and forward all events to the consumer of `rxVirtualFor`.
 *
 * @docsCategory RxVirtualFor
 * @docsPage RxVirtualFor
 * @publicApi
 */
export class RxVirtualScrollViewportComponent {
    elementRef = inject((ElementRef));
    scrollStrategy = inject((RxVirtualScrollStrategy), {
        optional: true,
    });
    scrollElement = inject(RxVirtualScrollElement, { optional: true });
    /**
     * @description
     *
     * Sets the first view to be visible to the user.
     * The viewport waits for the data to arrive and scrolls to the given index immediately.
     *
     * */
    initialScrollIndex = 0;
    /** @internal */
    scrollSentinel;
    /** @internal */
    runway;
    /** @internal */
    viewRepeater;
    elementScrolled$ = this.scrollElement?.elementScrolled$ ??
        defer(() => unpatchedScroll(this.runway.nativeElement));
    /** @internal */
    _containerRect$ = new ReplaySubject(1);
    containerRect$ = this._containerRect$.asObservable();
    /**
     * @description
     *
     * The range to be rendered by `*rxVirtualFor`. This value is determined by the
     * provided `RxVirtualScrollStrategy`. It gives the user information about the
     * range of items being actually rendered to the DOM.
     * Note this value updates before the `renderCallback` kicks in, thus it is only
     * in sync with the DOM when the next `renderCallback` emitted an event.
     */
    viewRange = this.scrollStrategy.renderedRange$;
    /**
     * @description
     *
     * The index of the currently scrolled item. The scrolled item is the topmost
     * item actually being visible to the user.
     */
    scrolledIndexChange = this.scrollStrategy.scrolledIndex$;
    /** @internal */
    destroy$ = new Subject();
    /** @internal */
    constructor() {
        if (NG_DEV_MODE && !this.scrollStrategy) {
            throw Error('Error: rx-virtual-scroll-viewport requires an `RxVirtualScrollStrategy` to be set.');
        }
        observeElementSize(this.scrollElement?.getElementRef()?.nativeElement ??
            this.elementRef.nativeElement, {
            extract: (entries) => ({
                height: Math.round(entries[0].contentRect.height),
                width: Math.round(entries[0].contentRect.width),
            }),
        })
            .pipe(distinctUntilChanged(({ height: prevHeight, width: prevWidth }, { height, width }) => prevHeight === height && prevWidth === width), takeUntil(this.destroy$))
            .subscribe(this._containerRect$);
    }
    ngAfterViewInit() {
        this.scrollStrategy.contentSize$
            .pipe(distinctUntilChanged(), takeUntil(this.destroy$))
            .subscribe((size) => {
            this.updateContentSize(size);
        });
        if (this.initialScrollIndex != null && this.initialScrollIndex > 0) {
            this.scrollStrategy.contentSize$
                .pipe(filter((size) => size > 0), take(1), takeUntil(this.destroy$))
                .subscribe(() => {
                this.scrollToIndex(this.initialScrollIndex);
            });
        }
    }
    /** @internal */
    ngAfterContentInit() {
        if (ngDevMode && !this.viewRepeater) {
            throw Error('Error: rx-virtual-scroll-viewport requires a `RxVirtualViewRepeater` to be provided.');
        }
        this.scrollStrategy.attach(this, this.viewRepeater);
    }
    /** @internal */
    ngOnDestroy() {
        this.destroy$.next();
        this.scrollStrategy.detach();
    }
    getScrollElement() {
        return (this.scrollElement?.getElementRef()?.nativeElement ??
            this.runway.nativeElement);
    }
    getScrollTop() {
        return this.getScrollElement().scrollTop;
    }
    scrollTo(position, behavior) {
        // TODO: implement more complex scroll scenarios
        this.getScrollElement().scrollTo({ top: position, behavior: behavior });
    }
    scrollToIndex(index, behavior) {
        this.scrollStrategy.scrollToIndex(index, behavior);
    }
    measureOffset() {
        if (this.scrollElement) {
            const scrollableOffset = this.scrollElement.measureOffset();
            const rect = this.elementRef.nativeElement.getBoundingClientRect();
            return this.getScrollTop() + (rect.top - scrollableOffset);
        }
        else {
            return 0;
        }
    }
    updateContentSize(size) {
        if (this.scrollElement) {
            this.elementRef.nativeElement.style.height = `${size}px`;
        }
        else {
            this.scrollSentinel.nativeElement.style.transform = `translate(0, ${size - 1}px)`;
        }
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollViewportComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.1", type: RxVirtualScrollViewportComponent, isStandalone: true, selector: "rx-virtual-scroll-viewport", inputs: { initialScrollIndex: "initialScrollIndex" }, outputs: { viewRange: "viewRange", scrolledIndexChange: "scrolledIndexChange" }, host: { classAttribute: "rx-virtual-scroll-viewport" }, providers: [
            {
                provide: RxVirtualScrollViewport,
                useExisting: RxVirtualScrollViewportComponent,
            },
        ], queries: [{ propertyName: "viewRepeater", first: true, predicate: RxVirtualViewRepeater, descendants: true }], viewQueries: [{ propertyName: "scrollSentinel", first: true, predicate: ["sentinel"], descendants: true }, { propertyName: "runway", first: true, predicate: ["runway"], descendants: true, static: true }], ngImport: i0, template: `
    <div
      #runway
      class="rx-virtual-scroll__runway"
      [class.rx-virtual-scroll-element]="!scrollElement"
    >
      <div
        #sentinel
        class="rx-virtual-scroll__sentinel"
        *ngIf="!this.scrollElement"
      ></div>
      <ng-content></ng-content>
    </div>
  `, isInline: true, styles: [".rx-virtual-scroll-viewport{display:block;width:100%;height:100%;box-sizing:border-box;contain:strict}.rx-virtual-scroll-viewport .rx-virtual-scroll__runway{contain:strict;width:100%;position:absolute;top:0;bottom:0}.rx-virtual-scroll-viewport .rx-virtual-scroll__sentinel{width:1px;height:1px;contain:strict;position:absolute;will-change:transform}.rx-virtual-scroll-element{contain:strict;overflow:auto;-webkit-overflow-scrolling:touch}.rx-virtual-scroll-element:not(.rx-virtual-scroll-element:is(.rx-virtual-scroll-element--withSyncScrollbar)){transform:translateZ(0);will-change:scroll-position}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollViewportComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rx-virtual-scroll-viewport', template: `
    <div
      #runway
      class="rx-virtual-scroll__runway"
      [class.rx-virtual-scroll-element]="!scrollElement"
    >
      <div
        #sentinel
        class="rx-virtual-scroll__sentinel"
        *ngIf="!this.scrollElement"
      ></div>
      <ng-content></ng-content>
    </div>
  `, providers: [
                        {
                            provide: RxVirtualScrollViewport,
                            useExisting: RxVirtualScrollViewportComponent,
                        },
                    ], encapsulation: ViewEncapsulation.None, host: {
                        class: 'rx-virtual-scroll-viewport',
                    }, standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, imports: [NgIf], styles: [".rx-virtual-scroll-viewport{display:block;width:100%;height:100%;box-sizing:border-box;contain:strict}.rx-virtual-scroll-viewport .rx-virtual-scroll__runway{contain:strict;width:100%;position:absolute;top:0;bottom:0}.rx-virtual-scroll-viewport .rx-virtual-scroll__sentinel{width:1px;height:1px;contain:strict;position:absolute;will-change:transform}.rx-virtual-scroll-element{contain:strict;overflow:auto;-webkit-overflow-scrolling:touch}.rx-virtual-scroll-element:not(.rx-virtual-scroll-element:is(.rx-virtual-scroll-element--withSyncScrollbar)){transform:translateZ(0);will-change:scroll-position}\n"] }]
        }], ctorParameters: () => [], propDecorators: { initialScrollIndex: [{
                type: Input
            }], scrollSentinel: [{
                type: ViewChild,
                args: ['sentinel']
            }], runway: [{
                type: ViewChild,
                args: ['runway', { static: true }]
            }], viewRepeater: [{
                type: ContentChild,
                args: [RxVirtualViewRepeater]
            }], viewRange: [{
                type: Output
            }], scrolledIndexChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,