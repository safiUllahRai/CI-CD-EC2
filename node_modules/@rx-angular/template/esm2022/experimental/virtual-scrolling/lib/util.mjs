import { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';
import { cancelAnimationFrame, Promise, requestAnimationFrame, } from '@rx-angular/cdk/zone-less/browser';
import { from, Observable } from 'rxjs';
export function toBoolean(input) {
    return input != null && `${input}` !== 'false';
}
export function unpatchedAnimationFrameTick() {
    return new Observable((observer) => {
        const tick = requestAnimationFrame(() => {
            observer.next();
            observer.complete();
        });
        return () => {
            cancelAnimationFrame(tick);
        };
    });
}
export function unpatchedMicroTask() {
    return from(Promise.resolve());
}
export function unpatchedScroll(el) {
    return new Observable((observer) => {
        const listener = () => observer.next();
        getZoneUnPatchedApi(el, 'addEventListener').call(el, 'scroll', listener, {
            passive: true,
        });
        return () => {
            getZoneUnPatchedApi(el, 'removeEventListener').call(el, 'scroll', listener, { passive: true });
        };
    });
}
/**
 * @description
 *
 * calculates the correct scrollTop value in which the rx-virtual-scroll-viewport
 * is actually visible
 */
export function parseScrollTopBoundaries(scrollTop, offset, contentSize, containerSize) {
    const scrollTopWithOutOffset = scrollTop - offset;
    const maxSize = Math.max(contentSize - containerSize, containerSize);
    const maxScrollTop = Math.max(contentSize, containerSize);
    const adjustedScrollTop = Math.max(0, scrollTopWithOutOffset);
    const scrollTopAfterOffset = adjustedScrollTop - maxSize;
    return {
        scrollTopWithOutOffset,
        scrollTopAfterOffset,
        scrollTop: Math.min(adjustedScrollTop, maxScrollTop),
    };
}
/**
 * @description
 *
 * Calculates the visible size of the rx-virtual-scroll-viewport container. It
 * accounts for the fact that the viewport can partially or fully be out of viewport because
 * static contents that are living between the boundaries of rx-virtual-scroll-viewport
 * and its scrollable element.
 */
export function calculateVisibleContainerSize(containerSize, scrollTopWithOutOffset, scrollTopAfterOffset) {
    let clamped = containerSize;
    if (scrollTopWithOutOffset < 0) {
        clamped = Math.max(0, containerSize + scrollTopWithOutOffset);
    }
    else if (scrollTopAfterOffset > 0) {
        clamped = Math.max(0, containerSize - scrollTopAfterOffset);
    }
    return clamped;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdGVtcGxhdGUvZXhwZXJpbWVudGFsL3ZpcnR1YWwtc2Nyb2xsaW5nL3NyYy9saWIvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNyRSxPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLE9BQU8sRUFDUCxxQkFBcUIsR0FDdEIsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV4QyxNQUFNLFVBQVUsU0FBUyxDQUFDLEtBQTBDO0lBQ2xFLE9BQU8sS0FBSyxJQUFJLElBQUksSUFBSSxHQUFHLEtBQUssRUFBRSxLQUFLLE9BQU8sQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxVQUFVLDJCQUEyQjtJQUN6QyxPQUFPLElBQUksVUFBVSxDQUFPLENBQUMsUUFBUSxFQUFFLEVBQUU7UUFDdkMsTUFBTSxJQUFJLEdBQUcscUJBQXFCLENBQUMsR0FBRyxFQUFFO1lBQ3RDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNoQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsRUFBRTtZQUNWLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0I7SUFDaEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFxQixDQUFDO0FBQ3JELENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEVBQWU7SUFDN0MsT0FBTyxJQUFJLFVBQVUsQ0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUU7WUFDdkUsT0FBTyxFQUFFLElBQUk7U0FDZCxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsRUFBRTtZQUNWLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FDakQsRUFBRSxFQUNGLFFBQVEsRUFDUixRQUFRLEVBQ1IsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQ2xCLENBQUM7UUFDSixDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsU0FBaUIsRUFDakIsTUFBYyxFQUNkLFdBQW1CLEVBQ25CLGFBQXFCO0lBTXJCLE1BQU0sc0JBQXNCLEdBQUcsU0FBUyxHQUFHLE1BQU0sQ0FBQztJQUNsRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDckUsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDMUQsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQzlELE1BQU0sb0JBQW9CLEdBQUcsaUJBQWlCLEdBQUcsT0FBTyxDQUFDO0lBQ3pELE9BQU87UUFDTCxzQkFBc0I7UUFDdEIsb0JBQW9CO1FBQ3BCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQztLQUNyRCxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsNkJBQTZCLENBQzNDLGFBQXFCLEVBQ3JCLHNCQUE4QixFQUM5QixvQkFBNEI7SUFFNUIsSUFBSSxPQUFPLEdBQUcsYUFBYSxDQUFDO0lBQzVCLElBQUksc0JBQXNCLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDL0IsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7U0FBTSxJQUFJLG9CQUFvQixHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxhQUFhLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFpvbmVVblBhdGNoZWRBcGkgfSBmcm9tICdAcngtYW5ndWxhci9jZGsvaW50ZXJuYWxzL2NvcmUnO1xuaW1wb3J0IHtcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUsXG4gIFByb21pc2UsXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSxcbn0gZnJvbSAnQHJ4LWFuZ3VsYXIvY2RrL3pvbmUtbGVzcy9icm93c2VyJztcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQm9vbGVhbihpbnB1dDogbnVsbCB8IGJvb2xlYW4gfCBzdHJpbmcgfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlucHV0ICE9IG51bGwgJiYgYCR7aW5wdXR9YCAhPT0gJ2ZhbHNlJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucGF0Y2hlZEFuaW1hdGlvbkZyYW1lVGljaygpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPHZvaWQ+KChvYnNlcnZlcikgPT4ge1xuICAgIGNvbnN0IHRpY2sgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGljayk7XG4gICAgfTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnBhdGNoZWRNaWNyb1Rhc2soKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gIHJldHVybiBmcm9tKFByb21pc2UucmVzb2x2ZSgpKSBhcyBPYnNlcnZhYmxlPHZvaWQ+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5wYXRjaGVkU2Nyb2xsKGVsOiBFdmVudFRhcmdldCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGU8dm9pZD4oKG9ic2VydmVyKSA9PiB7XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiBvYnNlcnZlci5uZXh0KCk7XG4gICAgZ2V0Wm9uZVVuUGF0Y2hlZEFwaShlbCwgJ2FkZEV2ZW50TGlzdGVuZXInKS5jYWxsKGVsLCAnc2Nyb2xsJywgbGlzdGVuZXIsIHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGdldFpvbmVVblBhdGNoZWRBcGkoZWwsICdyZW1vdmVFdmVudExpc3RlbmVyJykuY2FsbChcbiAgICAgICAgZWwsXG4gICAgICAgICdzY3JvbGwnLFxuICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgeyBwYXNzaXZlOiB0cnVlIH1cbiAgICAgICk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogY2FsY3VsYXRlcyB0aGUgY29ycmVjdCBzY3JvbGxUb3AgdmFsdWUgaW4gd2hpY2ggdGhlIHJ4LXZpcnR1YWwtc2Nyb2xsLXZpZXdwb3J0XG4gKiBpcyBhY3R1YWxseSB2aXNpYmxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNjcm9sbFRvcEJvdW5kYXJpZXMoXG4gIHNjcm9sbFRvcDogbnVtYmVyLFxuICBvZmZzZXQ6IG51bWJlcixcbiAgY29udGVudFNpemU6IG51bWJlcixcbiAgY29udGFpbmVyU2l6ZTogbnVtYmVyXG4pOiB7XG4gIHNjcm9sbFRvcFdpdGhPdXRPZmZzZXQ6IG51bWJlcjtcbiAgc2Nyb2xsVG9wQWZ0ZXJPZmZzZXQ6IG51bWJlcjtcbiAgc2Nyb2xsVG9wOiBudW1iZXI7XG59IHtcbiAgY29uc3Qgc2Nyb2xsVG9wV2l0aE91dE9mZnNldCA9IHNjcm9sbFRvcCAtIG9mZnNldDtcbiAgY29uc3QgbWF4U2l6ZSA9IE1hdGgubWF4KGNvbnRlbnRTaXplIC0gY29udGFpbmVyU2l6ZSwgY29udGFpbmVyU2l6ZSk7XG4gIGNvbnN0IG1heFNjcm9sbFRvcCA9IE1hdGgubWF4KGNvbnRlbnRTaXplLCBjb250YWluZXJTaXplKTtcbiAgY29uc3QgYWRqdXN0ZWRTY3JvbGxUb3AgPSBNYXRoLm1heCgwLCBzY3JvbGxUb3BXaXRoT3V0T2Zmc2V0KTtcbiAgY29uc3Qgc2Nyb2xsVG9wQWZ0ZXJPZmZzZXQgPSBhZGp1c3RlZFNjcm9sbFRvcCAtIG1heFNpemU7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsVG9wV2l0aE91dE9mZnNldCxcbiAgICBzY3JvbGxUb3BBZnRlck9mZnNldCxcbiAgICBzY3JvbGxUb3A6IE1hdGgubWluKGFkanVzdGVkU2Nyb2xsVG9wLCBtYXhTY3JvbGxUb3ApLFxuICB9O1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENhbGN1bGF0ZXMgdGhlIHZpc2libGUgc2l6ZSBvZiB0aGUgcngtdmlydHVhbC1zY3JvbGwtdmlld3BvcnQgY29udGFpbmVyLiBJdFxuICogYWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgdGhlIHZpZXdwb3J0IGNhbiBwYXJ0aWFsbHkgb3IgZnVsbHkgYmUgb3V0IG9mIHZpZXdwb3J0IGJlY2F1c2VcbiAqIHN0YXRpYyBjb250ZW50cyB0aGF0IGFyZSBsaXZpbmcgYmV0d2VlbiB0aGUgYm91bmRhcmllcyBvZiByeC12aXJ0dWFsLXNjcm9sbC12aWV3cG9ydFxuICogYW5kIGl0cyBzY3JvbGxhYmxlIGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVWaXNpYmxlQ29udGFpbmVyU2l6ZShcbiAgY29udGFpbmVyU2l6ZTogbnVtYmVyLFxuICBzY3JvbGxUb3BXaXRoT3V0T2Zmc2V0OiBudW1iZXIsXG4gIHNjcm9sbFRvcEFmdGVyT2Zmc2V0OiBudW1iZXJcbikge1xuICBsZXQgY2xhbXBlZCA9IGNvbnRhaW5lclNpemU7XG4gIGlmIChzY3JvbGxUb3BXaXRoT3V0T2Zmc2V0IDwgMCkge1xuICAgIGNsYW1wZWQgPSBNYXRoLm1heCgwLCBjb250YWluZXJTaXplICsgc2Nyb2xsVG9wV2l0aE91dE9mZnNldCk7XG4gIH0gZWxzZSBpZiAoc2Nyb2xsVG9wQWZ0ZXJPZmZzZXQgPiAwKSB7XG4gICAgY2xhbXBlZCA9IE1hdGgubWF4KDAsIGNvbnRhaW5lclNpemUgLSBzY3JvbGxUb3BBZnRlck9mZnNldCk7XG4gIH1cbiAgcmV0dXJuIGNsYW1wZWQ7XG59XG4iXX0=