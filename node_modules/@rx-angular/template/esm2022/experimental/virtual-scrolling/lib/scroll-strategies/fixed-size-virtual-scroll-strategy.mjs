import { Directive, inject, Input, } from '@angular/core';
import { coalesceWith } from '@rx-angular/cdk/coalescing';
import { combineLatest, ReplaySubject, Subject, } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, startWith, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { RxVirtualScrollStrategy, } from '../model';
import { calculateVisibleContainerSize, parseScrollTopBoundaries, toBoolean, unpatchedAnimationFrameTick, } from '../util';
import { DEFAULT_ITEM_SIZE, DEFAULT_RUNWAY_ITEMS, DEFAULT_RUNWAY_ITEMS_OPPOSITE, RX_VIRTUAL_SCROLL_DEFAULT_OPTIONS, } from '../virtual-scroll.config';
import * as i0 from "@angular/core";
/**
 * @Directive FixedSizeVirtualScrollStrategy
 *
 * @description
 *
 * The `FixedSizeVirtualScrollStrategy` provides a very performant way of rendering
 * items of a given size. It is comparable to \@angular/cdk `FixedSizeVirtualScrollStrategy`, but
 * with a high performant layouting technique.
 *
 * @docsCategory RxVirtualFor
 * @docsPage RxVirtualFor
 * @publicApi
 */
export class FixedSizeVirtualScrollStrategy extends RxVirtualScrollStrategy {
    defaults = inject(RX_VIRTUAL_SCROLL_DEFAULT_OPTIONS, {
        optional: true,
    });
    /**
     * @description
     * The size of the items in the virtually scrolled list
     */
    set itemSize(itemSize) {
        if (typeof itemSize === 'number') {
            this._itemSize = itemSize;
        }
    }
    get itemSize() {
        return this._itemSize;
    }
    _itemSize = DEFAULT_ITEM_SIZE;
    /**
     * @description
     * When enabled, the scroll strategy stops removing views from the viewport,
     * instead it only adds views. This setting can be changed on the fly. Views will be added in both directions
     * according to the user interactions.
     */
    appendOnly = false;
    /**
     * @description
     * The amount of items to render upfront in scroll direction
     */
    runwayItems = this.defaults?.runwayItems ?? DEFAULT_RUNWAY_ITEMS;
    /**
     * @description
     * The amount of items to render upfront in reverse scroll direction
     */
    runwayItemsOpposite = this.defaults?.runwayItemsOpposite ?? DEFAULT_RUNWAY_ITEMS_OPPOSITE;
    /**
     * @description
     * If this flag is true, the virtual scroll strategy maintains the scrolled item when new data
     * is prepended to the list. This is very useful when implementing a reversed infinite scroller, that prepends
     * data instead of appending it
     */
    keepScrolledIndexOnPrepend = false;
    /** @internal */
    runwayStateChanged$ = new Subject();
    viewport = null;
    viewRepeater = null;
    _scrolledIndex$ = new ReplaySubject(1);
    scrolledIndex$ = this._scrolledIndex$.pipe(distinctUntilChanged());
    _scrolledIndex = 0;
    set scrolledIndex(index) {
        this._scrolledIndex = index;
        this._scrolledIndex$.next(index);
    }
    get scrolledIndex() {
        return this._scrolledIndex;
    }
    _contentSize$ = new ReplaySubject(1);
    contentSize$ = this._contentSize$.asObservable();
    _contentSize = 0;
    set contentSize(size) {
        this._contentSize = size;
        this._contentSize$.next(size);
    }
    _renderedRange$ = new ReplaySubject(1);
    renderedRange$ = this._renderedRange$.asObservable();
    _renderedRange = { start: 0, end: 0 };
    set renderedRange(range) {
        this._renderedRange = range;
        this._renderedRange$.next(range);
    }
    get renderedRange() {
        return this._renderedRange;
    }
    scrollTop = 0;
    /** @internal */
    scrollTopWithOutOffset = 0;
    /** @internal */
    scrollTopAfterOffset = 0;
    /** @internal */
    viewportOffset = 0;
    /** @internal */
    containerSize = 0;
    direction = 'down';
    detached$ = new Subject();
    /** @internal */
    ngOnChanges(changes) {
        if ((changes['runwayItemsOpposite'] &&
            !changes['runwayItemsOpposite'].firstChange) ||
            (changes['runwayItems'] && !changes['runwayItems'].firstChange)) {
            this.runwayStateChanged$.next();
        }
    }
    ngOnDestroy() {
        this.detach();
    }
    attach(viewport, viewRepeater) {
        this.viewport = viewport;
        this.viewRepeater = viewRepeater;
        this.calcRenderedRange();
        this.positionElements();
    }
    detach() {
        this.viewport = null;
        this.viewRepeater = null;
        this.detached$.next();
    }
    positionElements() {
        this.viewRepeater.renderingStart$.pipe(switchMap(() => {
            const start = this.renderedRange.start;
            return this.viewRepeater.viewRendered$.pipe(tap(({ view, index, item }) => {
                this._setViewPosition(view, (index + start) * this.itemSize);
                this.viewRenderCallback.next({
                    view,
                    item,
                    index,
                });
            }));
        }), this.untilDetached$()).subscribe();
    }
    calcRenderedRange() {
        const valueArray$ = this.viewRepeater.values$.pipe(map((values) => Array.isArray(values)
            ? values
            : values != null
                ? Array.from(values)
                : []), shareReplay({ bufferSize: 1, refCount: true }));
        /*
         * when keepScrolledIndexOnPrepend is active, we need to listen to data changes and figure out what was appended
         * before the last scrolledToItem
         */
        let valueCache = {};
        valueArray$
            .pipe(
        // TODO: this might cause issues when turning on/off
        filter(() => this.keepScrolledIndexOnPrepend), this.untilDetached$())
            .subscribe((valueArray) => {
            const trackBy = this.viewRepeater._trackBy;
            let scrollTo = this.scrolledIndex;
            const dataLength = valueArray.length;
            const oldDataLength = Object.keys(valueCache).length;
            if (oldDataLength > 0) {
                let i = 0;
                // check for each item from the last known scrolledIndex if it's an insert
                for (i; i <= scrollTo && i < dataLength; i++) {
                    // item is not in the valueCache, so it was added
                    if (!valueCache[trackBy(i, valueArray[i])]) {
                        scrollTo++;
                    }
                }
            }
            valueCache = {};
            valueArray.forEach((v, i) => (valueCache[trackBy(i, v)] = v));
            if (scrollTo !== this.scrolledIndex) {
                this.scrollToIndex(scrollTo);
            }
        });
        const dataLengthChanged$ = valueArray$.pipe(map((values) => values.length), distinctUntilChanged(), tap((dataLength) => (this.contentSize = dataLength * this.itemSize)));
        const onScroll$ = this.viewport.elementScrolled$.pipe(coalesceWith(unpatchedAnimationFrameTick()), startWith(void 0), tap(() => {
            this.viewportOffset = this.viewport.measureOffset();
            const { scrollTop, scrollTopWithOutOffset, scrollTopAfterOffset } = parseScrollTopBoundaries(this.viewport.getScrollTop(), this.viewportOffset, this._contentSize, this.containerSize);
            this.direction =
                scrollTopWithOutOffset > this.scrollTopWithOutOffset ? 'down' : 'up';
            this.scrollTopWithOutOffset = scrollTopWithOutOffset;
            this.scrollTopAfterOffset = scrollTopAfterOffset;
            this.scrollTop = scrollTop;
        }));
        combineLatest([
            dataLengthChanged$,
            this.viewport.containerRect$.pipe(map(({ height }) => {
                this.containerSize = height;
                return height;
            }), distinctUntilChanged()),
            onScroll$,
            this.runwayStateChanged$.pipe(startWith(void 0)),
        ])
            .pipe(map(([length]) => {
            const containerSize = calculateVisibleContainerSize(this.containerSize, this.scrollTopWithOutOffset, this.scrollTopAfterOffset);
            const range = { start: 0, end: 0 };
            if (this.direction === 'up') {
                range.start = Math.floor(Math.max(0, this.scrollTop - this.runwayItems * this.itemSize) /
                    this.itemSize);
                range.end = Math.min(length, Math.ceil((this.scrollTop +
                    containerSize +
                    this.runwayItemsOpposite * this.itemSize) /
                    this.itemSize));
            }
            else {
                range.start = Math.floor(Math.max(0, this.scrollTop - this.runwayItemsOpposite * this.itemSize) / this.itemSize);
                range.end = Math.min(length, Math.ceil((this.scrollTop +
                    containerSize +
                    this.runwayItems * this.itemSize) /
                    this.itemSize));
            }
            if (this.appendOnly) {
                range.start = Math.min(this._renderedRange.start, range.start);
                range.end = Math.max(this._renderedRange.end, range.end);
            }
            this.scrolledIndex = Math.floor(this.scrollTop / this.itemSize);
            return range;
        }), distinctUntilChanged(({ start: prevStart, end: prevEnd }, { start, end }) => prevStart === start && prevEnd === end), this.untilDetached$())
            .subscribe((range) => (this.renderedRange = range));
    }
    scrollToIndex(index, behavior) {
        const scrollTop = this.itemSize * index;
        this.viewport.scrollTo(this.viewportOffset + scrollTop, behavior);
    }
    untilDetached$() {
        return (o$) => o$.pipe(takeUntil(this.detached$));
    }
    _setViewPosition(view, scrollTop) {
        const element = this.getElement(view);
        element.style.position = 'absolute';
        element.style.transform = `translateY(${scrollTop}px)`;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FixedSizeVirtualScrollStrategy, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "18.0.1", type: FixedSizeVirtualScrollStrategy, isStandalone: true, selector: "rx-virtual-scroll-viewport[itemSize]", inputs: { itemSize: "itemSize", appendOnly: ["appendOnly", "appendOnly", toBoolean], runwayItems: "runwayItems", runwayItemsOpposite: "runwayItemsOpposite", keepScrolledIndexOnPrepend: ["keepScrolledIndexOnPrepend", "keepScrolledIndexOnPrepend", toBoolean] }, providers: [
            {
                provide: RxVirtualScrollStrategy,
                useExisting: FixedSizeVirtualScrollStrategy,
            },
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FixedSizeVirtualScrollStrategy, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rx-virtual-scroll-viewport[itemSize]',
                    providers: [
                        {
                            provide: RxVirtualScrollStrategy,
                            useExisting: FixedSizeVirtualScrollStrategy,
                        },
                    ],
                    standalone: true,
                }]
        }], propDecorators: { itemSize: [{
                type: Input
            }], appendOnly: [{
                type: Input,
                args: [{ transform: toBoolean }]
            }], runwayItems: [{
                type: Input
            }], runwayItemsOpposite: [{
                type: Input
            }], keepScrolledIndexOnPrepend: [{
                type: Input,
                args: [{ transform: toBoolean }]
            }] } });
//# sourceMappingURL=data:application/json;base64,