/**
 * @internal
 *
 * Factory that returns a `ListTemplateManager` for the passed params.
 *
 * @param templateSettings
 */
export function createVirtualListTemplateManager({ viewContainerRef, templateRef, createViewContext, updateViewContext, templateCacheSize, }) {
    let _viewCache = [];
    let itemCount = 0;
    return {
        getListChanges,
        setItemCount: (count) => (itemCount = count),
        detach: () => {
            for (let i = 0; i < _viewCache.length; i++) {
                _viewCache[i].destroy();
            }
            _viewCache = [];
        },
    };
    function _updateView(item, index, count, contextIndex) {
        const view = viewContainerRef.get(index);
        updateViewContext(item, view, {
            count,
            index: contextIndex,
        });
        view.detectChanges();
        return view;
    }
    /**
     * Inserts a view for a new item, either from the cache or by creating a new
     * one.
     */
    function _insertView(value, count, adjustIndexWith, currentIndex) {
        currentIndex = currentIndex ?? viewContainerRef.length;
        const contextIndex = currentIndex + adjustIndexWith;
        const cachedView = _insertViewFromCache(currentIndex);
        if (cachedView) {
            updateViewContext(value, cachedView, {
                count,
                index: contextIndex,
            });
            cachedView.detectChanges();
            return [currentIndex, cachedView];
        }
        const context = createViewContext(value, {
            count,
            index: contextIndex,
        });
        const view = viewContainerRef.createEmbeddedView(templateRef, context, currentIndex);
        view.detectChanges();
        return [currentIndex, view];
    }
    /** Detaches the view at the given index and inserts into the view cache. */
    function _detachAndCacheView(index) {
        const detachedView = viewContainerRef.detach(index);
        _maybeCacheView(detachedView);
        detachedView.detectChanges();
    }
    /** Moves view at the previous index to the current index. */
    function _moveView(value, adjustedPreviousIndex, currentIndex, count, contextIndex) {
        const oldView = viewContainerRef.get(adjustedPreviousIndex);
        const view = (viewContainerRef.move(oldView, currentIndex));
        updateViewContext(value, view, {
            count,
            index: contextIndex,
        });
        view.detectChanges();
        return view;
    }
    /**
     * Cache the given detached view. If the cache is full, the view will be
     * destroyed.
     */
    function _maybeCacheView(view) {
        if (_viewCache.length < templateCacheSize) {
            _viewCache.push(view);
            return true;
        }
        else {
            const index = viewContainerRef.indexOf(view);
            // The host component could remove views from the container outside of
            // the view repeater. It's unlikely this will occur, but just in case,
            // destroy the view on its own, otherwise destroy it through the
            // container to ensure that all the references are removed.
            if (index === -1) {
                view.destroy();
            }
            else {
                viewContainerRef.remove(index);
            }
            return false;
        }
    }
    /** Inserts a recycled view from the cache at the given index. */
    function _insertViewFromCache(index) {
        const cachedView = _viewCache.pop();
        if (cachedView) {
            return viewContainerRef.insert(cachedView, index);
        }
        return null;
    }
    /**
     * @internal
     */
    function getListChanges(changes, items, count, adjustIndexWith) {
        const changedIdxs = new Set();
        const listChanges = [];
        let notifyParent = false;
        let appendedAtEnd = 0;
        const otherMovedIds = [];
        changes.forEachOperation(({ item, previousIndex }, adjustedPreviousIndex, currentIndex) => {
            if (previousIndex == null) {
                // insert
                const index = currentIndex === null ? undefined : currentIndex;
                listChanges.push([
                    index ?? items.length + appendedAtEnd,
                    () => {
                        const [insertedIndex, view] = _insertView(item, count, adjustIndexWith, index);
                        return {
                            view,
                            index: insertedIndex,
                            item,
                        };
                    },
                ]);
                if (index === undefined) {
                    appendedAtEnd++;
                }
                changedIdxs.add(item);
                notifyParent = true;
            }
            else if (currentIndex == null) {
                // remove
                listChanges.push([
                    adjustedPreviousIndex,
                    () => {
                        _detachAndCacheView(adjustedPreviousIndex ?? undefined);
                        return { item };
                    },
                    true,
                ]);
                notifyParent = true;
            }
            else if (adjustedPreviousIndex !== null) {
                // move
                listChanges.push([
                    currentIndex,
                    () => {
                        const view = _moveView(item, adjustedPreviousIndex, currentIndex, count, currentIndex + adjustIndexWith);
                        return {
                            view,
                            index: currentIndex,
                            item,
                        };
                    },
                ]);
                otherMovedIds.push(adjustedPreviousIndex);
                changedIdxs.add(item);
                notifyParent = true;
            }
        });
        changes.forEachIdentityChange(({ item, currentIndex }) => {
            if (currentIndex != null && !changedIdxs.has(item)) {
                listChanges.push([
                    currentIndex,
                    () => {
                        const view = _updateView(item, currentIndex, count, currentIndex + adjustIndexWith);
                        return {
                            view,
                            index: currentIndex,
                            item,
                        };
                    },
                ]);
                changedIdxs.add(item);
            }
        });
        for (let i = 0; i < otherMovedIds.length; i++) {
            const itemIndex = otherMovedIds[i];
            const item = items[itemIndex];
            if (item && !changedIdxs.has(item)) {
                changedIdxs.add(item);
                listChanges.push([
                    itemIndex,
                    () => maybeUpdateView(itemIndex, count, itemIndex + adjustIndexWith, item),
                ]);
            }
        }
        if (changedIdxs.size < items.length) {
            for (let i = 0; i < items.length; i++) {
                const item = items[i];
                if (!changedIdxs.has(item)) {
                    listChanges.push([
                        i,
                        () => maybeUpdateView(i, count, i + adjustIndexWith, item),
                    ]);
                }
            }
        }
        return [listChanges, notifyParent];
    }
    function maybeUpdateView(viewIndex, count, itemIndex, item) {
        const view = viewContainerRef.get(viewIndex);
        if (view.context.count !== count || view.context.index !== itemIndex) {
            return {
                view: _updateView(item, viewIndex, count, itemIndex),
                index: viewIndex,
                item,
            };
        }
        return {
            index: viewIndex,
            view,
            item,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,