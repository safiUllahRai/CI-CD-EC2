import { Directive, } from '@angular/core';
import { RxDefaultListViewContext } from '@rx-angular/cdk/template';
import { of, Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @Directive RxVirtualScrollStrategy
 *
 * @description
 * Abstract implementation for the actual implementations of the ScrollStrategies
 * being consumed by `*rxVirtualFor` and `rx-virtual-scroll-viewport`.
 *
 * This is one of the core parts for the virtual scrolling implementation. It has
 * to determine the `ListRange` being rendered to the DOM as well as managing
 * the layouting task for the `*rxVirtualFor` directive.
 *
 * @docsCategory RxVirtualFor
 * @docsPage RxVirtualFor
 * @publicApi
 */
export class RxVirtualScrollStrategy {
    /** @internal */
    get isStable() {
        return of(true);
    }
    /**
     * @description
     *
     * Emits whenever an update to a single view was rendered
     */
    viewRenderCallback = new Subject();
    /** @internal */
    nodeIndex;
    /** @internal */
    getElement(view) {
        if (this.nodeIndex !== undefined) {
            return view.rootNodes[this.nodeIndex];
        }
        const rootNode = view.rootNodes[0];
        this.nodeIndex = rootNode instanceof HTMLElement ? 0 : 1;
        return view.rootNodes[this.nodeIndex];
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollStrategy, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: RxVirtualScrollStrategy, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollStrategy, decorators: [{
            type: Directive
        }] });
/** @internal */
export class RxVirtualScrollViewport {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollViewport, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: RxVirtualScrollViewport, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollViewport, decorators: [{
            type: Directive
        }] });
/** @internal */
export class RxVirtualViewRepeater {
    _trackBy;
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualViewRepeater, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: RxVirtualViewRepeater, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualViewRepeater, decorators: [{
            type: Directive
        }] });
/** @internal */
export class RxVirtualForViewContext extends RxDefaultListViewContext {
    rxVirtualForOf;
    constructor(item, rxVirtualForOf, customProps) {
        super(item, customProps);
        this.rxVirtualForOf = rxVirtualForOf;
    }
}
export class RxVirtualScrollElement {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollElement, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: RxVirtualScrollElement, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollElement, decorators: [{
            type: Directive
        }] });
//# sourceMappingURL=data:application/json;base64,