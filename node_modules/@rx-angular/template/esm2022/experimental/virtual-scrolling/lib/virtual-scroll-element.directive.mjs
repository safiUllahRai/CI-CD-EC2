import { Directive, ElementRef, inject } from '@angular/core';
import { RxVirtualScrollElement } from './model';
import { unpatchedScroll } from './util';
import * as i0 from "@angular/core";
export class RxVirtualScrollElementDirective {
    elementRef = inject(ElementRef);
    elementScrolled$ = unpatchedScroll(this.elementRef.nativeElement);
    getElementRef() {
        return this.elementRef;
    }
    measureOffset() {
        return this.elementRef.nativeElement.getBoundingClientRect().top;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollElementDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: RxVirtualScrollElementDirective, isStandalone: true, selector: "[rxVirtualScrollElement]", host: { classAttribute: "rx-virtual-scroll-element" }, providers: [
            {
                provide: RxVirtualScrollElement,
                useExisting: RxVirtualScrollElementDirective,
            },
        ], ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RxVirtualScrollElementDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rxVirtualScrollElement]',
                    providers: [
                        {
                            provide: RxVirtualScrollElement,
                            useExisting: RxVirtualScrollElementDirective,
                        },
                    ],
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        class: 'rx-virtual-scroll-element',
                    },
                    standalone: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1zY3JvbGwtZWxlbWVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3RlbXBsYXRlL2V4cGVyaW1lbnRhbC92aXJ0dWFsLXNjcm9sbGluZy9zcmMvbGliL3ZpcnR1YWwtc2Nyb2xsLWVsZW1lbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFFBQVEsQ0FBQzs7QUFnQnpDLE1BQU0sT0FBTywrQkFBK0I7SUFDekIsVUFBVSxHQUFHLE1BQU0sQ0FBMEIsVUFBVSxDQUFDLENBQUM7SUFFakUsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFM0UsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxHQUFHLENBQUM7SUFDbkUsQ0FBQzswSEFWVSwrQkFBK0I7OEdBQS9CLCtCQUErQiw4SEFaL0I7WUFDVDtnQkFDRSxPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixXQUFXLEVBQUUsK0JBQStCO2FBQzdDO1NBQ0Y7OzJGQU9VLCtCQUErQjtrQkFkM0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLHNCQUFzQjs0QkFDL0IsV0FBVyxpQ0FBaUM7eUJBQzdDO3FCQUNGO29CQUNELHFFQUFxRTtvQkFDckUsSUFBSSxFQUFFO3dCQUNKLEtBQUssRUFBRSwyQkFBMkI7cUJBQ25DO29CQUNELFVBQVUsRUFBRSxJQUFJO2lCQUNqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSeFZpcnR1YWxTY3JvbGxFbGVtZW50IH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQgeyB1bnBhdGNoZWRTY3JvbGwgfSBmcm9tICcuL3V0aWwnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcnhWaXJ0dWFsU2Nyb2xsRWxlbWVudF0nLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBSeFZpcnR1YWxTY3JvbGxFbGVtZW50LFxuICAgICAgdXNlRXhpc3Rpbmc6IFJ4VmlydHVhbFNjcm9sbEVsZW1lbnREaXJlY3RpdmUsXG4gICAgfSxcbiAgXSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ3J4LXZpcnR1YWwtc2Nyb2xsLWVsZW1lbnQnLFxuICB9LFxuICBzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBSeFZpcnR1YWxTY3JvbGxFbGVtZW50RGlyZWN0aXZlIGltcGxlbWVudHMgUnhWaXJ0dWFsU2Nyb2xsRWxlbWVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZiA9IGluamVjdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj4oRWxlbWVudFJlZik7XG5cbiAgcmVhZG9ubHkgZWxlbWVudFNjcm9sbGVkJCA9IHVucGF0Y2hlZFNjcm9sbCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG5cbiAgZ2V0RWxlbWVudFJlZigpOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZjtcbiAgfVxuICBtZWFzdXJlT2Zmc2V0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgfVxufVxuIl19